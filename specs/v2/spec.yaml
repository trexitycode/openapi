openapi: 3.0.2
info:
  version: '2.0.0-beta.1'
  title: Trexity API
  license:
    name: MIT
    url: https://raw.githubusercontent.com/trexitycode/openapi/main/license
  termsOfService: 'https://trexity.com/terms-of-service/'
  contact:
    email: support@trexity.com
    url: 'http://trexity.com'
  description: |
    # Migrating to v2

    This version of the API is a major departure from v1. We normalize around the concept of a delivery
    and provide a more consistent API. All endpoints are now delivery centric, and all webhook events
    are relative to a delivery.

    **Breaking Changes**

    - the complex rate endpoints have been removed in favour of auotmated delivery batching

    **Updates**

    - addressing has been changed from a single address string with a format, to a structured [address object](#tag/Addresses)
    - the concepts of a "shipment" and a "parcel" has been replaced with the unified concept of a [delivery](#tag/Deliveries)
    - **in v2 the delivery ID is interchangable with a parcel ID from v1**
    - all webhook events have been renamed to be relative to a delivery
    - a new endpiont has been added to retrieve your [webhook secret](/#operation/getWebhookSecretKey)

    # Issues

    Please open [bug reports](https://github.com/trexitycode/openapi/issues/new?template=bug_report.md) or [feature requests](https://github.com/trexitycode/openapi/issues/new?template=feature_request.md) in the [issues](https://github.com/trexitycode/openapi/issues) board.

    # Usage Policy

    By using this API to provide delivery rates to your customers you agree to display the [Rate](#operation/getSimpleRate) `name` without modification.
    The [Rate](#operation/getSimpleRate) `description` can be replaced with a custom value (e.g. Same-day, etc.) or displayed as-is from the Rate.

    This allows Trexity to ensure consistent messaging wherever Trexity delivery rates are displayed to your customers.

    ## Suspension & Termination

    Failure to comply with this Usage Policy may result in suspension of your Trexity merchant account and/or API Keys. Continued failure to comply may result in the termination of your Trexity merchant account.

    # Concepts & Workflows

    ## Concepts

    **Delivery** represents an order, has pickup information and customer information.

    **Rate** represents a price for completing a delivery.

    ## Workflow

    1. [Calculate a delivery rate](#operation/calculateDeliveryRate) by specifying pickup information, customer information and the delivery address to get a rate to show your customer and obtain an estimate for a pickup time
    2. [Create a delivery](#operation/createDelivery) by specifying pickup information, customer information and the delivery address
    3. [Get delivery label](#operation/getDeliveryLabel) for a delivery then affix to the delivery packaging
    4. [Listen for delivery events](#tag/Webhooks) to track the delivery until it is delivered

    ## Sandbox Environment

    All API operations have an alternate base URL available in the sandbox environment.

    To use the sandbox environment:
    1. Create an account on the [Sandbox Merchant Portal](https://merchant.beta.trexity.com/signup)
    2. Navigate to the [API Keys page](https://merchant.beta.trexity.com/api/keys) in the Advanced area.
    3. Create a new API Key
    4. Use the new API Key and the sandbox base URL in your API requests

    > Use the dropdown in the top right of an API operation page to select the sandbox environment server.

    ### Credit Cards

    When signing up for the sandbox environment you can use the  following
    credit card with any 3-digit CVC and a future expiration date.

    ```
    4000 0012 4000 0000
    ```

    ### Expectations

    The sandbox environment is intended for development and testing purposes only.
    Expect latency to be higher than the production environment.

    We use our sandbox environment as well when developing new features to ensure
    there are no breaking changes. So expect the occasional breaking change when
    using the sandbox environment.

    # Responses

    ### Successful Responses

    All endpoints, when responding successfully, will return a JSON object with a `data` field when there is data to return.
    ```
    // typescript interface
    interface SuccessResponse<T = object | any[]> {
      data: T
    }
    ```

    ### Error Responses

    All endpoints, when applicable and responding with a non 200 HTTP status code, will return a JSON object with an `errors` field.
    ```
    // typescript interface
    interface ErrorResponse {
      errors: { message: string, code: string }[]
    }
    ```

tags:
  - name: Addresses
    description: |
      Group of endpoints for handling addresses.

      ### Address Format

      In general, whenever an endpoint accepts an address, we expect the following shape:

      ```
      {
        "addressLine1": "123 Fake St",
        "addressLine2": "Apt 4",
        "city": "Ottawa",
        "provinceCode": "ON",
        "postalCode": "K2G 8FT",
        "countryCode": "CA"
      }
      ```

      ## Apartment / Unit / Suite

      To specify an apartment, unit or suite as part of the address use the address line 2 field.
      ```
      {
        "addressLine1": "123 Fake St",
        "addressLine2": "Apt 4",
        "city": "Ottawa",
        "provinceCode": "ON",
        "postalCode": "K2G 8FT",
        "countryCode": "CA"
      }
      ```
  - name: Rating
    description: |
      Prior to creating a Delivery, you can calculate the rates based on the pickup and delivery addresses.
      See our [rates](/#operation/getRate) endpoint for more information.
  - name: Deliveries
    description: |
      The most common approach to get a delivery on the road is to:
        * [Create a Delivery](/#operation/createDelivery)

      You can schedule the posting of the Delivery in the future.
      Trexity guarantees that the scheduled Delivery will not be posted or broadcast prior to the time it was scheduled for.
      Please see the [details](/#operation/createDelivery) here.

  - name: Receipts
    description: |
      Retrieve receipt information

  - name: Webhooks
    description: |
      Manage webhooks.

      ## Verifying Requests

      All webhook requests have a header that contains a signature signed with the Trexity Merchant's
      webhook secret as found in their "Trexity API" settings. Optionally, there is a [getSecretKey](#operation/getWebhookSecretKey) endpoint to retrieve the webhook secret programatically.
      To verify the signature, take the raw request body as text and create a SHA256 HMAC signed with the merchant's webhook secret and convert to hex.

      Example:
      ```
      // nodejs
      const text = await new Promise((resolve, reject) => {
        const buff = []
        req.setEncoding('utf8')
        req.on('data', chunk => (buff.push(chunk)))
        req.once('end', resolve(buff.join('')))
        req.once('error', reject)
      })

      const sig = require('crypto')
        .createHmac('sha256', process.env.TRX_MERCH_WEBHOOK_SECRET)
        .update(text)
        .digest('hex')

      const isValid = req.headers['x-trexity-signature'] === sig

      if (!isValid) {
        res.statusCode = 403
        res.end('Forbidden', 'utf8')
        return
      }

      const body = JSON.parse(body)
      // ...
      ```

      ## Request Payload

      All webhook requests will have the following headers:

      - `x-trexity-event-name` the event name
      - `x-trexity-signature` the SHA256 HMAC signature of the request
      - `x-trexity-webhook-order-id` the processing order of the webhook used to determine what order webhooks should be processed in

      All webhook requests will have the following payload shape. Where `data` is the delivery object changed,
      like returned from the [get delivery endpoint](#tag/Deliveries/operation/getDelivery)

      ```
      {
        "timestamp": "2020-07-25T10:48:08.987Z",
        "data": {
          ...the delivery object that changed...
        }
      }
      ```

  - name: Locations
    description: |
      Retrieve your locations.

  - name: Regions
    description: |
      Region related operations that usually involve service cities and their zones

servers:
  - description: production
    url: 'https://trexity.app/api/v2'
  - description: sandbox
    url: 'https://trexity-driver-mobile.uc.r.appspot.com/api/v2'
components:
  securitySchemes:
    MerchantApiKeyAuth:
      $ref: components/securitySchemes/MerchantApiKeyAuth.yaml
security:
  - MerchantApiKeyAuth: []
paths:
  /addresses/check:
    $ref: ./paths/api/check-address.yaml
  /rates:
    $ref: ./paths/api/rates.yaml
  /regions:
    $ref: ./paths/api/regions.yaml
  /deliveries:
    $ref: ./paths/api/deliveries.yaml
  /deliveries/{deliveryId}:
    $ref: ./paths/api/delivery.yaml
  /deliveries/{deliveryId}/status:
    $ref: ./paths/api/delivery-status.yaml
  /deliveries/{deliveryId}/pod:
    $ref: ./paths/api/delivery-pod.yaml
  /deliveries/{deliveryId}/label:
    $ref: ./paths/api/delivery-label.yaml
  /deliveries/{deliveryId}/tracking:
    $ref: ./paths/api/delivery-tracking.yaml
  /deliveries/{deliveryId}/cancel:
    $ref: ./paths/api/delivery-cancel.yaml
  /webhooks:
    $ref: ./paths/api/webhooks.yaml
  /webhooks/{webhookId}:
    $ref: ./paths/api/webhook.yaml
  /webhooks/secret-key:
    $ref: ./paths/api/webhooks-get-secret-key.yaml
  /locations:
    $ref: ./paths/api/locations.yaml
  /locations/find:
    $ref: ./paths/api/locations-find.yaml
  /receipts/{yearMonth}:
    $ref: ./paths/api/receipts.yaml
