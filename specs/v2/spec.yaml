openapi: 3.0.2
info:
  version: '2.0.0'
  title: Trexity API
  license:
    name: MIT
    url: https://raw.githubusercontent.com/trexitycode/openapi/main/license
  termsOfService: 'https://trexity.com/terms-of-service/'
  contact:
    email: support@trexity.com
    url: 'http://trexity.com'
  description: |
    # Issues

    Please open [bug reports](https://github.com/trexitycode/openapi/issues/new?template=bug_report.md) or [feature requests](https://github.com/trexitycode/openapi/issues/new?template=feature_request.md) requests in the [issues](https://github.com/trexitycode/openapi/issues) board.

    # Usage Policy

    By using this API to provide delivery rates to your customers you agree to display the [Rate](#operation/getSimpleRate) `name` without modification.
    The [Rate](#operation/getSimpleRate) `description` can be replaced with a custom value (e.g. Same-day, etc.) or displayed as-is from the Rate.

    This allows Trexity to ensure consistent messaging wherever Trexity delivery rates are displayed to your customers.

    ## Suspension & Termination

    Failure to comply with this Usage Policy may result in suspension of your Trexity merchant account and/or API Keys. Continued failure to comply may result in the termination of your Trexity merchant account.

    # Concepts & Workflows

    ## Concepts

    **Delivery** represents an order, has pickup information and customer information.

    **Rate** represents a price for completing a delivery.

    **Batch Rate** represents an optimized set of rates for completing multiple deliveries from a single location.

    ## Typical Workflow

    This workflow is the most common and typical way to create a delivery. Just provide delivery and pickup information,
    and optionally a pickup time to create a delivery.

    1. [Optionally get a delivery rate](#operation/getDeliveryRate) specify the pickup information, customer information and delivery address to get a rate to show your customer
    2. [Create a delivery](#operation/createDelivery) specify the pickup information, customer information and delivery address
    3. [Get delivery label](#operation/getDeliveryLabel) for the delivery then affix to the delivery packaging
    4. [Listen for delivery events](#section/Delivery-Events) to track the delivery until it is delivered

    ## Batching Workflow

    This workflow is used when you have **more than 20 deliveries to create from a single location and you will benefit from optimizing your egress operations**.
    This is because the batch rate workflow will optimize the pickup and delivery of all the deliveries in multiple, optimially routed, trips.

    1. [Create a batch rate](#operation/createBatchRateRequest) specify the pickup information, customer information and delivery addresses
    2. [Accept the batch rate](#operation/createBatchRateAcceptRequest) and create the deliveries
    3. [Get delivery labels](#operation/getDeliveryLabel) for each delivery then affix to the delivery packaging
    4. [Listen for delivery events](#section/Delivery-Events) to track the deliveries until they are delivered

    ## Delivery Status

    Follow the [Delivery Events](#section/Delivery-Events) guide to understand what webhooks you will need to listen to.

    ## Sandbox Environment

    All API operations have an alternate base URL available in the sandbox environment.

    To use the sandbox environment:
    1. Create an account on the [Sandbox Merchant Portal](https://merchant.beta.trexity.com/signup)
    2. Navigate to the [API Keys page](https://merchant.beta.trexity.com/api/keys) in the Advanced area.
    3. Create a new API Key
    4. Use the new API Key and the sandbox base URL in your API requests

    > Use the dropdown in the top right of an API operation page to select the sandbox environment server.

    ### Credit Cards

    When signing up for the sandbox environment you can use the  following
    credit card with any 3-digit CVC and a future expiration date.

    ```
    4000 0012 4000 0000
    ```

    ### Expectations

    The sandbox environment is intended for development and testing purposes only.
    Expect latency to be higher than the production environment.

    We use our sandbox environment as well when developing new features to ensure
    there are no breaking changes. So expect the occasional breaking change when
    using the sandbox environment.

    # Responses

    All endpoints will return an object and if there is actual data
    to be returned, it is going to be named `data`, where `data` may
    be an array or an object.

    If there is an `error` field present on the root JSON object, that
    means something went wrong and that error message is all we know about it.
    Additionally, in some cases, you may inspect the HTTP status codes to
    gather more information.

    Please check our payload/response examples in detail as well as the
    curl examples that are a part of each section that documents an operation.

    Example of a successful response:
    `{ data: ... }`

    Example of a response with an error:
    `{ error: 'Some error message', data: null }`

tags:
  - name: Addresses
    description: |
      Group of endpoints for handling addresses.

      ### Address Format

      In general, whenever an endpoint accepts an address, we expect the following shape:

      ```
      {
        "addressLine1": "123 Fake St",
        "addressLine2": "Apt 4",
        "city": "Ottawa",
        "provinceCode": "ON",
        "postalCode": "K2G 8FT",
        "countryCode": "CA"
      }
      ```

      ## Apartment / Unit / Suite

      To specify an apartment, unit or suite as part of the address use the address line 2 field.
      ```
      {
        "addressLine1": "123 Fake St",
        "addressLine2": "Apt 4",
        "city": "Ottawa",
        "provinceCode": "ON",
        "postalCode": "K2G 8FT",
        "countryCode": "CA"
      }
      ```
  - name: Rating
    description: |
      Prior to creating a Delivery, you can calculate the rates based on the pickup and delivery addresses.
      See our [rates](/#operation/getRate) endpoint for more information.
  - name: Batching
    description: |
      Prior to creating a Delivery, you can calculate the rates based on the pickup and delivery addresses.
      See our [batch rates](/#operation/createBatchRateRequest) endpoint for more information.
  - name: Deliveries
    description: |
      The most common approach to get a delivery on the road is to:
        * [Create a Delivery](/#operation/createDelivery)

      You can schedule the posting of the Delivery in the future.
      Trexity guarantees that the scheduled Delivery will not be posted or broadcast prior to the time it was scheduled for.
      Please see the [details](/#operation/createDelivery) here.

  - name: Receipts
    description: |
      Retrieve receipt information

  - name: Webhooks
    description: |
      Manage webhooks.

      ## Verifying Requests

      All webhook requests have a header that contains a signature signed with the Trexity Merchant's
      webhook secret as found in their "Trexity API" settings. To verify the signature take the raw
      request body as text and create a SHA256 HMAC signed with the merchant's webhook secret and covert to hex.

      Example:
      ```
      // nodejs
      const text = await new Promise((resolve, reject) => {
        const buff = []
        req.setEncoding('utf8')
        req.on('data', chunk => (buff.push(chunk)))
        req.once('end', resolve(buff.join('')))
        req.once('error', reject)
      })

      const sig = require('crypto')
        .createHmac('sha256', process.env.TRX_MERCH_WEBHOOK_SECRET)
        .update(text)
        .digest('hex')

      const isValid = req.headers['x-trexity-signature'] === sig

      if (!isValid) {
        res.statusCode = 403
        res.end('Forbidden', 'utf8')
        return
      }

      const body = JSON.parse(body)
      // ...
      ```

  - name: Locations
    description: |
      Retrieve and manage Locations for a Trexity Merchant.

  - name: Regions
    description: |
      Region related operations that usually involve service cities and their zones

servers:
  - description: production
    url: 'https://trexity.app/api/v2'
  - description: sandbox
    url: 'https://trexity-driver-mobile.uc.r.appspot.com/api/v2'
components:
  securitySchemes:
    MerchantApiKeyAuth:
      $ref: components/securitySchemes/MerchantApiKeyAuth.yaml
    AccessTokenAuth:
      $ref: components/securitySchemes/AccessTokenAuth.yaml
security:
  - MerchantApiKeyAuth: []
  - AccessTokenAuth: []
paths:
  /addresses/check:
    $ref: ./paths/api/check-address.yaml
  /rates:
    $ref: ./paths/api/rates.yaml
  /batch-rate-requests:
    $ref: ./paths/api/batch-rate-request-create.yaml
  /batch-rate-requests/{batchRateRequestId}:
    $ref: ./paths/api/batch-rate-request.yaml
  /batch-rates/{batchRateId}:
    $ref: ./paths/api/batch-rate.yaml
  /batch-rates/{batchRateId}/accept-requests:
    $ref: ./paths/api/batch-rate-accept-request-create.yaml
  /batch-rates/{batchRateId}/accept-requests/{batchRateAcceptRequestId}:
    $ref: ./paths/api/batch-rate-accept-request.yaml
  /regions/service-city-zones:
    $ref: ./paths/api/service-city-zones.yaml
  /deliveries:
    $ref: ./paths/api/deliveries.yaml
  /deliveries/{deliveryId}:
    $ref: ./paths/api/delivery.yaml
  /deliveries/{deliveryId}/status:
    $ref: ./paths/api/delivery-status.yaml
  /deliveries/{deliveryId}/pod:
    $ref: ./paths/api/delivery-pod.yaml
  /deliveries/{deliveryId}/label:
    $ref: ./paths/api/delivery-label.yaml
  /deliveries/{deliveryId}/cancel:
    $ref: ./paths/api/delivery-cancel.yaml
  /webhooks:
    $ref: ./paths/api/webhooks.yaml
  /webhooks/{webhookId}:
    $ref: ./paths/api/webhook.yaml
  /locations:
    $ref: ./paths/api/locations.yaml
  /locations/find:
    $ref: ./paths/api/locations-find.yaml
  /receipts/{yearMonth}:
    $ref: ./paths/api/get-receipt.yaml
