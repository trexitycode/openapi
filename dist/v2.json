{
  "openapi": "3.0.2",
  "info": {
    "version": "2.0.0-beta.1",
    "title": "Trexity API",
    "license": {
      "name": "MIT",
      "url": "https://raw.githubusercontent.com/trexitycode/openapi/main/license"
    },
    "termsOfService": "https://trexity.com/terms-of-service/",
    "contact": {
      "email": "support@trexity.com",
      "url": "http://trexity.com"
    },
    "description": "# Migrating to v2\n\nThis version of the API is a major departure from v1. We normalize around the concept of a delivery\nand provide a more consistent API. All endpoints are now delivery centric, and all webhook events\nare relative to a delivery.\n\n**Breaking Changes**\n\n- the complex rate endpoints have been removed in favour of auotmated delivery batching\n\n**Updates**\n\n- addressing has been changed from a single address string with a format, to a structured [address object](#tag/Addresses)\n- the concepts of a \"shipment\" and a \"parcel\" has been replaced with the unified concept of a [delivery](#tag/Deliveries)\n- **in v2 the delivery ID is interchangable with a parcel ID from v1**\n- all webhook events have been renamed to be relative to a delivery\n- a new endpiont has been added to retrieve your [webhook secret](/#operation/getWebhookSecretKey)\n\n# Issues\n\nPlease open [bug reports](https://github.com/trexitycode/openapi/issues/new?template=bug_report.md) or [feature requests](https://github.com/trexitycode/openapi/issues/new?template=feature_request.md) in the [issues](https://github.com/trexitycode/openapi/issues) board.\n\n# Usage Policy\n\nBy using this API to provide delivery rates to your customers you agree to display the [Rate](#operation/getSimpleRate) `name` without modification.\nThe [Rate](#operation/getSimpleRate) `description` can be replaced with a custom value (e.g. Same-day, etc.) or displayed as-is from the Rate.\n\nThis allows Trexity to ensure consistent messaging wherever Trexity delivery rates are displayed to your customers.\n\n## Suspension & Termination\n\nFailure to comply with this Usage Policy may result in suspension of your Trexity merchant account and/or API Keys. Continued failure to comply may result in the termination of your Trexity merchant account.\n\n# Concepts & Workflows\n\n## Concepts\n\n**Delivery** represents an order, has pickup information and customer information.\n\n**Rate** represents a price for completing a delivery.\n\n## Workflow\n\n1. [Calculate a delivery rate](#operation/calculateDeliveryRate) by specifying pickup information, customer information and the delivery address to get a rate to show your customer and obtain an estimate for a pickup time\n2. [Create a delivery](#operation/createDelivery) by specifying pickup information, customer information and the delivery address\n3. [Get delivery label](#operation/getDeliveryLabel) for a delivery then affix to the delivery packaging\n4. [Listen for delivery events](#tag/Webhooks) to track the delivery until it is delivered\n\n## Sandbox Environment\n\nAll API operations have an alternate base URL available in the sandbox environment.\n\nTo use the sandbox environment:\n1. Create an account on the [Sandbox Merchant Portal](https://merchant.beta.trexity.com/signup)\n2. Navigate to the [API Keys page](https://merchant.beta.trexity.com/api/keys) in the Advanced area.\n3. Create a new API Key\n4. Use the new API Key and the sandbox base URL in your API requests\n\n> Use the dropdown in the top right of an API operation page to select the sandbox environment server.\n\n### Credit Cards\n\nWhen signing up for the sandbox environment you can use the  following\ncredit card with any 3-digit CVC and a future expiration date.\n\n```\n4000 0012 4000 0000\n```\n\n### Expectations\n\nThe sandbox environment is intended for development and testing purposes only.\nExpect latency to be higher than the production environment.\n\nWe use our sandbox environment as well when developing new features to ensure\nthere are no breaking changes. So expect the occasional breaking change when\nusing the sandbox environment.\n\n# Responses\n\n### Successful Responses\n\nAll endpoints, when responding successfully, will return a JSON object with a `data` field when there is data to return.\n```\n// typescript interface\ninterface SuccessResponse<T = object | any[]> {\n  data: T\n}\n```\n\n### Error Responses\n\nAll endpoints, when applicable and responding with a non 200 HTTP status code, will return a JSON object with an `errors` field.\n```\n// typescript interface\ninterface ErrorResponse {\n  errors: { message: string, code: string }[]\n}\n```\n"
  },
  "servers": [
    {
      "description": "production",
      "url": "https://trexity.app/api/v2"
    },
    {
      "description": "sandbox",
      "url": "https://trexity-driver-mobile.uc.r.appspot.com/api/v2"
    }
  ],
  "security": [
    {
      "MerchantApiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Addresses",
      "description": "Group of endpoints for handling addresses.\n\n### Address Format\n\nIn general, whenever an endpoint accepts an address, we expect the following shape:\n\n```\n{\n  \"addressLine1\": \"123 Fake St\",\n  \"addressLine2\": \"Apt 4\",\n  \"city\": \"Ottawa\",\n  \"provinceCode\": \"ON\",\n  \"postalCode\": \"K2G 8FT\",\n  \"countryCode\": \"CA\"\n}\n```\n\n## Apartment / Unit / Suite\n\nTo specify an apartment, unit or suite as part of the address use the address line 2 field.\n```\n{\n  \"addressLine1\": \"123 Fake St\",\n  \"addressLine2\": \"Apt 4\",\n  \"city\": \"Ottawa\",\n  \"provinceCode\": \"ON\",\n  \"postalCode\": \"K2G 8FT\",\n  \"countryCode\": \"CA\"\n}\n```\n"
    },
    {
      "name": "Rating",
      "description": "Prior to creating a Delivery, you can calculate the rates based on the pickup and delivery addresses.\nSee our [rates](/#operation/getRate) endpoint for more information.\n"
    },
    {
      "name": "Deliveries",
      "description": "The most common approach to get a delivery on the road is to:\n  * [Create a Delivery](/#operation/createDelivery)\n\nYou can schedule the posting of the Delivery in the future.\nTrexity guarantees that the scheduled Delivery will not be posted or broadcast prior to the time it was scheduled for.\nPlease see the [details](/#operation/createDelivery) here.\n"
    },
    {
      "name": "Receipts",
      "description": "Retrieve receipt information\n"
    },
    {
      "name": "Webhooks",
      "description": "Manage webhooks.\n\n## Verifying Requests\n\nAll webhook requests have a header that contains a signature signed with the Trexity Merchant's\nwebhook secret as found in their \"Trexity API\" settings. Optionally, there is a [getSecretKey](#operation/getWebhookSecretKey) endpoint to retrieve the webhook secret programatically.\nTo verify the signature, take the raw request body as text and create a SHA256 HMAC signed with the merchant's webhook secret and convert to hex.\n\nExample:\n```\n// nodejs\nconst text = await new Promise((resolve, reject) => {\n  const buff = []\n  req.setEncoding('utf8')\n  req.on('data', chunk => (buff.push(chunk)))\n  req.once('end', resolve(buff.join('')))\n  req.once('error', reject)\n})\n\nconst sig = require('crypto')\n  .createHmac('sha256', process.env.TRX_MERCH_WEBHOOK_SECRET)\n  .update(text)\n  .digest('hex')\n\nconst isValid = req.headers['x-trexity-signature'] === sig\n\nif (!isValid) {\n  res.statusCode = 403\n  res.end('Forbidden', 'utf8')\n  return\n}\n\nconst body = JSON.parse(body)\n// ...\n```\n\n## Request Payload\n\nAll webhook requests will have the following headers:\n\n- `x-trexity-event-name` the event name\n- `x-trexity-signature` the SHA256 HMAC signature of the request\n- `x-trexity-webhook-order-id` the processing order of the webhook used to determine what order webhooks should be processed in\n\nAll webhook requests will have the following payload shape. Where `data` is the delivery object changed,\nlike returned from the [get delivery endpoint](#tag/Deliveries/operation/getDelivery)\n\n```\n{\n  \"timestamp\": \"2020-07-25T10:48:08.987Z\",\n  \"data\": {\n    ...the delivery object that changed...\n  }\n}\n```\n"
    },
    {
      "name": "Locations",
      "description": "Retrieve your locations.\n"
    },
    {
      "name": "Regions",
      "description": "Region related operations that usually involve service cities and their zones\n"
    }
  ],
  "paths": {
    "/addresses/check": {
      "post": {
        "operationId": "checkAddress",
        "tags": [
          "Addresses"
        ],
        "summary": "Check an address",
        "description": "Checks whether an address is serviceable and returns a result that identifies if the address can be\nused as a delivery address or a pickup address. If, a pickup address is provided, the result will\nindicate if the delivery address is in a tiered zone.\n\n### Rate Limiting\n\nThis operation can be requested without authentication, however it will have a\nstrict rate limit of 3 requests every 10 seconds.\n\nHowever, authenticated requests can request 12 times every 10 seconds.\n\n**Unexhaustive list of error codes.**\n\n- `invalid-delivery.addressLine1` = When the addressLine1 is missing\n- `invalid-delivery.city` = When the city is missing\n- `invalid-delivery.postalCode` = When the postalCode is missing, invalid or not acceptedable\n- `invalid-delivery.provinceCode` = When the province is missing, or is not acceptedable\n- `invalid-delivery.countryCode` = When the country is missing, or is not acceptedable\n- `invalid-pickup.addressLine1` = When the addressLine1 is missing\n- `invalid-pickup.city` = When the city is missing\n- `invalid-pickup.postalCode` = When the postalCode is missing, invalid or not acceptedable\n- `invalid-pickup.provinceCode` = When the province is missing, or is not acceptedable\n- `invalid-pickup.countryCode` = When the country is missing, or is not acceptedable\n- `unverified-delivery-address` = When the delivery address cannot be verified with a geocoded location\n- `unverified-pickup-address` = When the pickup address cannot be verified with a geocoded location\n",
        "security": [
          {},
          {
            "MerchantApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "delivery": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AddressDetailsDTO"
                      }
                    ],
                    "description": "The address to check."
                  },
                  "pickup": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AddressDetailsDTO"
                      }
                    ],
                    "description": "The pickup address from which to generate the tiered zones.",
                    "example": {
                      "addressLine1": "124 Fake Winding Rd",
                      "city": "Ottawa",
                      "provinceCode": "ON",
                      "postalCode": "K2G 6F2",
                      "countryCode": "CA"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "pickup": {
                          "type": "boolean",
                          "description": "If `true` then the address can be used as a pickup address (or business address)."
                        },
                        "delivery": {
                          "type": "string",
                          "enum": [
                            "none",
                            "normal",
                            "extended",
                            "tier-1",
                            "tier-2",
                            "tier-3"
                          ],
                          "description": "The delivery classification of the address.\n\n`none` = The address is outside a known delivery zone and is unserviceable.\n\n`normal` = The address is serviceable and normal delivery rates apply.\n\n`extended` = The address is serviceable and surcharges may apply.\n\n`tier-1, tier-2, tier-3, ...` = The address is serviceable and the address is in a tier-1, tier-2, tier-3, etc. zone.\n"
                        },
                        "lngLat": {
                          "type": "object",
                          "description": "The latitude and logitude of the checked address.\n",
                          "properties": {
                            "longitude": {
                              "type": "number",
                              "description": "Longitude of the address"
                            },
                            "latitude": {
                              "type": "number",
                              "description": "Latitude of the address"
                            }
                          }
                        },
                        "serviceCity": {
                          "type": "string",
                          "description": "Service city that the address is located. Provided in the format: \"(city name), (2 letter abbreviation of province)\" (may or may not be supported by Trexity)\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rates": {
      "post": {
        "operationId": "calculateDeliveryRate",
        "tags": [
          "Rating"
        ],
        "summary": "Calculate delivery rate",
        "description": "Calculate a rate for a delivery.\n\nIf no `pickupAddress` is specified then your primary location's address will\nbe used as the pickup address.\n\nPlease review our [Usage Policy](/#section/Usage-Policy) before displaying rates to your customers.\n\nThe rate response will include estimates for post, pickup, and delivery time.\n\nAdditionally, the properties `pickupAfter`, `deliverAfter` and `deliverBefore` can be provided to indicate a\npickup or delivery window. Otheriwse the next available pickup window (i.e. ASAP) is assumed.\n\n**Unexhaustive list of error codes.**\n\n- `invalid-merchant-requirements` = When the requirements specified don't match the requirements granted to the merchant\n- `pickup-address-unserviceable` = When the pickup address cannot be matched to any of the merchant's locations\n- `invalid-pickup-address` = When the pickup address is invalid\n- `pickup-point-outside-zone` = When the pickup address is outside Trexity's service area\n- `invalid-data-payload` = When there are issues with the input data provided\n- `num-labels-too-large` = When numLabels is too large\n- `time-constraint-violation` = When the delivery/pickup time constraints specified cannot be met\n- `service-unavailable` = When API Service Availability Rules in merchant portal prevent rates from being returned\n- `time-constraint-violation` = When the constraint specified by pickupAfter, or deliverAfter and/or deliverBefore cannot be met\n- `post-date-outside-operating-hours` = When the estimated post date is outside Trexity's or the merchant's operating hours\n- `delivery-date-outside-operating-hours` = When the estimated delivery date is outside Trexity's or the merchant's operating hours\n- `pickup-address-outsidetaxboundary` = When the pickup address is outside the province/state of the merchant's location\n- `merchant-disabled` = When the merchant account has been disabled\n- `missing-profile-details` = When the merchant profile is incomplete\n- `delivery-point-outside-zone` = When the delivery address is outside Trexity's service area\n- `pickup-point-outside-zone` = When the pickup address is outside Trexity's service area\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X POST {server-url}/rates\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\\\n  -d '{\n    \"pickupAddress\": {\n      \"addressLine1\": \"456 Elgin St\",\n      \"city\": \"Ottawa\",\n      \"provinceCode\": \"ON\",\n      \"postalCode\": \"K2P 1N5\",\n      \"countryCode\": \"CA\"\n    },\n    \"deliveryAddress\": {\n      \"addressLine1\": \"225 Preston St\",\n      \"city\": \"Ottawa\",\n      \"provinceCode\": \"ON\",\n      \"postalCode\": \"K1R 7R1\",\n      \"countryCode\": \"CA\"\n    },\n    \"requirements\": {\n      \"legalAgeAlcohol\": true\n    },\n    \"deliveryValue\": 2500\n  }'\n"
          }
        ],
        "requestBody": {
          "description": "Payload that minimally describes a direct delivery.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryRateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DeliveryRateWithETA"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/regions": {
      "get": {
        "operationId": "getRegion",
        "tags": [
          "Regions"
        ],
        "summary": "Get region",
        "description": "Get the region for a specific pickup address.\n\n### Rate Limiting\n\nThis operation can be requested without authentication, however it will have a\nstrict rate limit of 6 requests every 10 seconds.\n\nHowever, authenticated requests can request 12 times every 10 seconds.\n\n**Possible error codes:**\n- `invalid-address` = When the address cannot be recognized as a valid address\n- `invalid-addressLine1` = When the addressLine1 is missing\n- `invalid-city` = When the city is missing\n- `invalid-postalCode` = When the postalCode is missing, invalid or not acceptedable\n- `invalid-provinceCode` = When the province is missing, or is not acceptedable\n- `invalid-countryCode` = When the country is missing, or is not acceptedable\n",
        "security": [
          {},
          {
            "MerchantApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "addressLine1",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "123 Fake St"
          },
          {
            "in": "query",
            "name": "addressLine2",
            "schema": {
              "type": "string"
            },
            "example": "Unit 4"
          },
          {
            "in": "query",
            "name": "city",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The pickup address from which to generate the market zones.",
            "example": "Ottawa"
          },
          {
            "in": "query",
            "name": "postalCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The pickup address from which to generate the market zones.",
            "example": "K2G 6F2"
          },
          {
            "in": "query",
            "name": "provinceCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The pickup address from which to generate the market zones.",
            "example": "ON"
          },
          {
            "in": "query",
            "name": "countryCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The pickup address from which to generate the market zones.",
            "example": "CA"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Region"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/deliveries": {
      "post": {
        "operationId": "createDelivery",
        "tags": [
          "Deliveries"
        ],
        "summary": "Create delivery",
        "description": "Create a delivery and optionally schedule it for pickup. A rate for the delivery will be calculated at the same time.\n\nIf you want to schedule for pickup, please use exactly one of:\n  1) pickupStartAt (when to pickup by) must match your market's pickup windows as listed [here](https://trexity.zendesk.com/hc/en-us/articles/16940024932627-Trexity-Pickup-Windows).\n  2) deliverStartAt and an optional deliverEndAt (when to deliver by) must match your recommended delivery windows as listed [here](https://merchant.trexity.com/api).\n\nIf no `pickupAddress` is specified then your primary location's address will be used as the pickup address.\n\n**Unexhaustive list of error codes.**\n\n- `unauthorized-requirements` = When the requirements specified don't match the requirements granted to the merchant\n- `pickup-address-unserviceable` = When the pickup address cannot be matched to any of the merchant's locations\n- `invalid-pickup-address` = When the pickup address is invalid\n- `invalid-delivery-address` = When the delivery address is invalid\n- `pickup-point-outside-zone` = When the pickup address is outside Trexity's service area\n- `invalid-input` = When there are issues with the input data provided\n- `invalid-delivery-data` = When there are issues with the data provided and the delivery cannot be created\n- `num-labels-too-large` = When numLabels is too large\n- `invalid-scanids` = When the scanId specified is already in use\n- `outside-operating-hours` = When the pickup or delivery time specified is outside the your delivery hours or Trexity's service hours\n- `invalid-scheduled-posting-date` = The scheduling fields are invalid and do not describe a valid pickup window\n- `unauthorized-numlabels` = When total numLabels for the delivery is too large\n- `pickup-address-outsidetaxboundary` = The pickup address is outside the merchant's location province\n- `merchant-disabled` = The merchant has been disabled\n- `missing-profile-details` = The merchant has an incomplete profile\n- `no-shipment-rate` = A delivery rate failed to be calculated due to delivery or pickup address geofencing error\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X POST {server-url}/deliveries\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\\\n  -d '{\n    \"pickupAddress\": {\n      \"addressLine1\": \"123 Fake St\",\n      \"addressLine2\": \"Apt 4\",\n      \"city\": \"Ottawa\",\n      \"provinceCode\": \"ON\",\n      \"postalCode\": \"K2G 8FT\",\n      \"countryCode\": \"CA\"\n    },\n    \"deliveryAddress\": {\n      \"addressLine1\": \"123 Fake St\",\n      \"addressLine2\": \"Apt 4\",\n      \"city\": \"Ottawa\",\n      \"provinceCode\": \"ON\",\n      \"postalCode\": \"K2G 8FT\",\n      \"countryCode\": \"CA\"\n    },\n    \"requirements\": {},\n    \"orderId\": \"BFG10K\",\n    \"deliveryValue\": 10000\n  }'\n"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Delivery"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listDeliveries",
        "tags": [
          "Deliveries"
        ],
        "summary": "List deliveries",
        "description": "List deliveries that match the specified filters.\n\n## Filtering By Dates\n\nWhen filtering by a date range both the `fromDate` and `toDate` query parameters must be provided. **The maximum date range is 90 days.**\n\n## Mutually exclusive filters\n\nThe following filters are mutually exclusive:\n  - `fromDate` and `toDate`\n  - `externalId`\n  - `metaField1`, `metaField2`, `metaField3`\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET {server-url}/deliveries\n  -H 'Content-Type: application/json'\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "select",
            "schema": {
              "type": "string"
            },
            "description": "The comma-separated list of fields to include in the delivery response (if not specified or blank then all fields will be included).\n\nIf a field is specified that is not defined by the Delivery object, then responds with HTTP 400. Only top-level fields are supported.\n"
          },
          {
            "in": "query",
            "name": "fromDate",
            "schema": {
              "$ref": "#/components/schemas/SimplifiedDateISOString"
            }
          },
          {
            "in": "query",
            "name": "toDate",
            "schema": {
              "$ref": "#/components/schemas/SimplifiedDateISOString"
            }
          },
          {
            "in": "query",
            "name": "externalId",
            "schema": {
              "type": "string",
              "maxLength": 256,
              "description": "The ID of the external entity that is associated to this delivery (e.g. the external order or shipment ID).\n"
            }
          },
          {
            "in": "query",
            "name": "metaField1",
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "description": "Can be a partial string to match the value of the first metadata field\n"
            }
          },
          {
            "in": "query",
            "name": "metaField2",
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "description": "Can be a partial string to match the value of the second metadata field \n"
            }
          },
          {
            "in": "query",
            "name": "metaField3",
            "schema": {
              "type": "string",
              "maxLength": 1024,
              "description": "Can be a partial string to match the value of the third metadata field   \n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Delivery"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/deliveries/{deliveryId}": {
      "delete": {
        "operationId": "deleteDelivery",
        "tags": [
          "Deliveries"
        ],
        "summary": "Delete delivery",
        "description": "Attempt to delete a delivery. Only draft deliveries can be deleted.\n",
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "patch": {
        "operationId": "updateDelivery",
        "tags": [
          "Deliveries"
        ],
        "summary": "Update delivery",
        "description": "Updates the details of a delivery.\n\n**Unexhaustive list of error codes.**\n\n- `unauthorized-requirements` = When the requirements specified don't match the requirements granted to the merchant\n- `pickup-address-unserviceable` = When the pickup address cannot be matched to any of the merchant's locations\n- `invalid-pickup-address` = When the pickup address is invalid\n- `invalid-delivery-address` = When the delivery address is invalid\n- `pickup-point-outside-zone` = When the pickup address is outside Trexity's service area\n- `invalid-input` = When there are issues with the input data provided\n- `invalid-delivery-data` = When there are issues with the data provided and the delivery cannot be updated\n- `num-labels-too-large` = When numLabels is too large\n- `invalid-scanids` = When the scanId specified is already in use\n- `outside-operating-hours` = When the pickup or delivery time specified is outside the your delivery hours or Trexity's service hours\n- `invalid-scheduled-posting-date` = The scheduling fields are invalid and do not describe a valid pickup window\n- `unauthorized-numlabels` = When total numLabels for the entire delivery is too large\n- `pickup-address-outsidetaxboundary` = The pickup address is outside the merchant's location province\n- `merchant-disabled` = The merchant has been disabled\n- `missing-profile-details` = The merchant has an incomplete profile\n- `no-shipment-rate` = A delivery rate failed to be calculated due to delivery or pickup address geofencing error\n",
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery that needs to be updated"
          }
        ],
        "requestBody": {
          "description": "Payload describing the changes that need to be updated in your delivery",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryDTOUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Delivery"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      },
      "get": {
        "operationId": "getDelivery",
        "tags": [
          "Deliveries"
        ],
        "summary": "Get delivery",
        "description": "Gets the details of a delivery\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET {server-url}/deliveries/1234-4321-1234-4321\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery"
          },
          {
            "in": "query",
            "name": "select",
            "schema": {
              "type": "string"
            },
            "description": "The comma-separated list of fields to include in the delivery response (if not specified or blank then all fields will be included).\n\nIf a field is specified that is not defined by the Delivery object, then responds with HTTP 400. Only top-level fields are supported.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Delivery"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/deliveries/{deliveryId}/status": {
      "get": {
        "operationId": "getDeliveryStatus",
        "tags": [
          "Deliveries"
        ],
        "summary": "Get delivery status",
        "description": "Retrieve a delivery's status\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET {server-url}/deliveries/1234-5678-9012-3456/status\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery (can be externalId or delivery ID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DeliveryStatus"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/deliveries/{deliveryId}/pod": {
      "get": {
        "operationId": "getDeliveryPod",
        "tags": [
          "Deliveries"
        ],
        "summary": "Get proof of delivery",
        "description": "Get a delivery's proof of delivery photo or signature.\n\nIf the delivery `requirements.proofOfDelivery` is not `photo+signature` or `signature` then a 404 will be returned.\n\nIf the delivery is not yet completed or not found then a 404 will be returned.\n\n**Possible error codes.**\n\n- `invalid-delivery-id` - The delivery id is invalid.\n- `delivery-not-found` - The delivery is not found.\n- `no-proof-of-delivery` - The delivery does not require a proof of delivery.\n- `delivery-not-completed` - The delivery is not yet completed.\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET {server-url}/deliveries/1234-4321-1234-4321/pod\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery (can be externalId or delivery ID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Photographic Proof of Delivery."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/deliveries/{deliveryId}/label": {
      "get": {
        "operationId": "getDeliveryLabel",
        "tags": [
          "Deliveries"
        ],
        "summary": "Get delivery label",
        "description": "Get a delivery's shipping label\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET {server-url}/deliveries/1234-4321-1234-4321/label\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery (can be externalId or delivery ID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "A label that needs to be scanned at pickup by a Trexity courier."
                }
              },
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "A label that needs to be scanned at pickup by a Trexity courier."
                }
              },
              "application/jsonl": {
                "schema": {
                  "type": "string",
                  "format": "jsonl",
                  "description": "JSONL text where each line represents a label encoded as a JSON object. Up to \"numLabels\" (from the delivery) labels are returned.\n\nEach label is an encoded JSON object with the following fields:\n\n- `label`: The label as a base64 encoded string with PNG format.\n- `mimeType`: The MIME type of the label. Default is `image/png`.\n\n**NOTE:** The example shows the response as a JSON encoded string, but in practice\nthe response is actually JSON encoded objects separated by newline characters. This is\na limitation of our OpenAPI renderer.\n\nSee: https://jsonlines.org/\n"
                },
                "example": "{\"label\": \"...base64encodedstring...\", \"mimeType\": \"image/png\"}\n{\"label\": \"...base64encodedstring...\", \"mimeType\": \"image/png\"}\n"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/deliveries/{deliveryId}/tracking": {
      "get": {
        "operationId": "getDeliveryTracking",
        "tags": [
          "Deliveries"
        ],
        "summary": "Get delivery tracking URL",
        "description": "Get the tracking URL for a delivery\n",
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the delivery"
          },
          {
            "in": "query",
            "name": "lifetime",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 2678400,
              "default": 86400
            },
            "examples": {
              "7 days": {
                "summary": "lifetime of 7 days",
                "value": 604800
              }
            },
            "description": "The lifetime of the tracking URL in seconds. Default is 24 hours and maximum is 31 days. After the lifetime passes, the tracking page will respond with 404."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "trackingUrl": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Valid Tracking Url": {
                    "value": {
                      "data": {
                        "trackingUrl": "{tracking-server-url}?token=<jwt token goes here>"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/deliveries/{deliveryId}/cancel": {
      "post": {
        "operationId": "cancelDelivery",
        "tags": [
          "Deliveries"
        ],
        "summary": "Cancel delivery",
        "description": "Cancels a delivery. A cancelled delivery will no longer be able to be assigned to a courier. \n\nCan only cancel deliveries that are in the `draft`, `pending`, `assigned`, or `in-transit` status.\n\n**If cancelling a delivery while `assigned` or `in-transit` then a cancellation fee will be charged.**\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X PATCH {server-url}/deliveries/1234-5678-9012-3456/cancel\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery that needs to be cancelled"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks": {
      "post": {
        "operationId": "createWebhook",
        "tags": [
          "Webhooks"
        ],
        "summary": "Create webhook",
        "description": "Create a new webhook for the specified event.\n\nIf a webhook with the same event name and url already exists, a 400 error will be returned.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "eventName",
                  "url"
                ],
                "properties": {
                  "eventName": {
                    "$ref": "#/components/schemas/WebhookEventName"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Secure (https://...) URL to send the webhook request to.",
                    "example": "https://example.com/trexity/webhook-handler"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully register a webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Webhook"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "operationId": "listWebhooks",
        "tags": [
          "Webhooks"
        ],
        "summary": "List webhooks",
        "description": "List all registered webhooks or registered webhooks for an event.\n",
        "parameters": [
          {
            "in": "query",
            "name": "eventName",
            "schema": {
              "$ref": "#/components/schemas/WebhookEventName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List registered webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Webhook"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks/{webhookId}": {
      "delete": {
        "operationId": "deleteWebhook",
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete webhook",
        "description": "Delete a registered webhook.\n",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "webhookId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted a webhook or if the webhook ID does not exist."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks/secret-key": {
      "get": {
        "operationId": "getWebhookSecretKey",
        "tags": [
          "Webhooks"
        ],
        "summary": "Get secret key",
        "description": "Get the secret key for the webhook signature verification.\n",
        "responses": {
          "200": {
            "description": "Successfully get the secret key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "secretKey"
                      ],
                      "properties": {
                        "secretKey": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/locations": {
      "get": {
        "operationId": "listLocations",
        "tags": [
          "Locations"
        ],
        "summary": "List locations",
        "description": "List all your locations. In order to manage Locations, you need to use the [Merchant Portal](https://merchant.trexity.com/).\n",
        "responses": {
          "200": {
            "description": "List Locations for a Merchant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MerchantLocation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/locations/find": {
      "post": {
        "operationId": "findLocation",
        "tags": [
          "Locations"
        ],
        "summary": "Find location",
        "description": "Find a location by name or address.\n\n**One of name or address or both must be provided.**\n\nIf both are provided, the name will be used to filter the results.\n\n**Possible error codes:**\n- `missing-required-fields` = When both name and address are not provided\n- `invalid-addressLine1` = When the addressLine1 is missing\n- `invalid-city` = When the city is missing\n- `invalid-provinceCode` = When the province is missing, or is not acceptedable\n- `invalid-postalCode` = When the postalCode is missing, invalid or not acceptedable\n- `invalid-countryCode` = When the country is not acceptedable\n- `invalid-address` = When the address cannot be recognized as a valid address\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Find a location by address",
                    "required": [
                      "address"
                    ],
                    "properties": {
                      "address": {
                        "$ref": "#/components/schemas/AddressDetailsDTO"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "description": "Find a location by name",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the location.",
                        "example": "MyStore in Nepean"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "description": "Find a location by address and name",
                    "required": [
                      "address",
                      "name"
                    ],
                    "properties": {
                      "address": {
                        "$ref": "#/components/schemas/AddressDetailsDTO"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the location.",
                        "example": "MyStore in Nepean"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MerchantLocation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/receipts/{yearMonth}": {
      "get": {
        "operationId": "listReceipts",
        "tags": [
          "Receipts"
        ],
        "summary": "List receipts",
        "description": "Retrieve the receipts for all or one location for a particular calendar month\n\n**Possible error codes:**\n- `invalid-year` = When the yearMonth has an invalid year\n- `invalid-month` = When the yearMonth has an invalid month\n",
        "parameters": [
          {
            "in": "path",
            "name": "yearMonth",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The year and month like \"YYYY-MM\"",
            "example": "2022-01"
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string"
            },
            "description": "The merchant location ID or case insensitive name. If specified then all receipt items will only be for this lcoation.",
            "example": "My Shop"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Receipt"
                      }
                    }
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "description": "The receipt items rendered as CSV"
                }
              },
              "text/html": {
                "schema": {
                  "description": "The receipt items rendered as a standalone HTML"
                }
              },
              "application/pdf": {
                "schema": {
                  "description": "The receipt items rendered as a PDF"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "MerchantApiKeyAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "This authentication strategy uses a Trexity Merchant API KEY. This API KEY is used\nwith the bearer scheme in the Authorization header.\n\nIn order to obtain a Trexity Merchant API key, you need to sign-up as Merchant at https://merchant.trexity.com/\nand create an API KEY through your merchant portal.\n\nFeel free to contact support@trexity.com for any questions you may have.\n\nExample:\n```\ncurl -X POST {server-url}/{path} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer <Merchant API Key>' \\\n  -d '{ ...body... }'\n```\n"
      }
    },
    "schemas": {
      "AddressDetailsBase": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "First line of the address",
            "example": "123 Fake St"
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of the address (apartment, suite, unit, etc.)",
            "example": "Apt 16"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "Ottawa"
          },
          "provinceCode": {
            "type": "string",
            "description": "Province or state code (e.g., ON, BC, CA)",
            "example": "ON"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code or ZIP code",
            "example": "K2G 6F2"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code (e.g., CA, US)",
            "example": "CA"
          }
        }
      },
      "AddressDetailsDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressDetailsBase"
          },
          {
            "type": "object",
            "required": [
              "addressLine1",
              "city",
              "provinceCode",
              "postalCode",
              "countryCode"
            ]
          }
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "code"
        ]
      },
      "DeliveryWindowProps": {
        "type": "object",
        "properties": {
          "pickupAfter": {
            "description": "Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\n**If present then deliverAfter and deliverBefore are ignored.**\n\nIf in the past then defaults to ASAP.\nCan be set to `new Date().toISOString()` or `\"ASAP\"` for ASAP.\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n\nAn example: ASAP\n",
            "type": "string"
          },
          "deliverAfter": {
            "description": "Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nIf in the past then defaults to ASAP, and must be less than or equal to `deliverBefore` if `deliverBefore` is provided.\nCan be set to `new Date().toISOString()` or `\"ASAP\"` for ASAP.\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n\nAn example: ASAP\n",
            "type": "string"
          },
          "deliverBefore": {
            "description": "Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nCannot be in the past.\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n",
            "type": "string"
          }
        }
      },
      "DeliveryRequirements": {
        "type": "object",
        "description": "Object representing the requirements that must be met by a courier in order\nfor them to be considered eligible for delivery.\n\nIf no requirements object is specified then the merchant location's default requirements\nwill be used.\n",
        "properties": {
          "vehicleType": {
            "type": "string",
            "description": "Describe the type of vehicle that must be used for a delivery.\n\n- any - Any vehicle type is allowed.\n- small - Sedan, hatchback, etc [example: Honda Civic]\n- medium - SUV or similar [example: Toyota Sienna]\n",
            "enum": [
              "any",
              "small",
              "medium"
            ]
          },
          "proofOfDelivery": {
            "type": "string",
            "enum": [
              "pin+signature",
              "pin",
              "signature",
              "photo"
            ],
            "description": "The proof of delivery that must be provided by the courier.\n\n- pin+signature - A PIN exchange and signature given by the recipient are required.\n- pin - A PIN exchange given by the recipient is required.\n- signature - A signature is required from the recipient.\n- photo - A safe-drop with a photo is required.\n"
          },
          "containsAlcohol": {
            "type": "boolean",
            "description": "Contains any trace of alcohol."
          },
          "requiresLegalAgeVerification": {
            "type": "boolean",
            "description": "Requires legal age verification."
          },
          "perishable": {
            "type": "boolean",
            "description": "Must be delivered by a courier who is equipped to deliver perishable items."
          },
          "returnReusables": {
            "type": "boolean",
            "description": "Must be delivered by a courier who will return collected reusables back to pickup."
          }
        }
      },
      "DeliveryRateDTO": {
        "description": "A simple description of a delivery for rating purposes",
        "allOf": [
          {
            "$ref": "#/components/schemas/DeliveryWindowProps"
          },
          {
            "type": "object",
            "required": [
              "deliveryAddress"
            ],
            "properties": {
              "pickupAddress": {
                "$ref": "#/components/schemas/AddressDetailsDTO"
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/AddressDetailsDTO"
              },
              "requirements": {
                "$ref": "#/components/schemas/DeliveryRequirements"
              },
              "numLabels": {
                "type": "number",
                "minimum": 1,
                "default": 1,
                "description": "The number of labels for the delivery (each separate package needs a label). \n"
              }
            }
          }
        ]
      },
      "DeliveryRate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the rate to show to the customer (if applicable)"
          },
          "description": {
            "type": "string",
            "description": "The description of the rate to show to the customer (if applicable)\n"
          },
          "currency": {
            "type": "string",
            "enum": [
              "CAD"
            ]
          },
          "fees": {
            "type": "array",
            "description": "The breakdown of each fee in the rate.\n",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "delivery",
                    "fuel",
                    "oversized",
                    "distance",
                    "returnable-features",
                    "large-vehicle"
                  ],
                  "description": "- `delivery` applied for the base delivery fee\n- `fuel` applied for fuel surcharge\n- `oversized` applied for a surplus of labels\n- `distance` applied for long distance deliveries\n- `returnable-features` applied for returnable features such bags, or packaging\n- `large-vehicle` applied for deliveries that require a medium or large vehicle\n"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount in cents of the fee."
                }
              }
            }
          },
          "subtotal": {
            "type": "number",
            "description": "The subtotal in cents before taxes.\n"
          },
          "taxes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "The tax rate code (e.g. \"HST\", \"GST\", \"PST\", etc.)"
                },
                "amount": {
                  "type": "number",
                  "description": "The tax amount in cents."
                },
                "rate": {
                  "type": "number",
                  "description": "The tax rate in decimal form (e.g. 0.13 for 13% tax)."
                }
              }
            }
          },
          "totalTaxes": {
            "type": "number",
            "description": "The total taxes charged in cents.\n"
          },
          "total": {
            "type": "number",
            "description": "The total price in cents after taxes. (subtotal + totalTaxes)"
          }
        }
      },
      "DeliveryRateWithETA": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DeliveryRate"
          },
          {
            "type": "object",
            "properties": {
              "estimatePickupAt": {
                "description": "Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n",
                "type": "string"
              },
              "estimateDeliverAt": {
                "description": "Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n",
                "type": "string"
              }
            }
          }
        ]
      },
      "GeoJSONPosition": {
        "type": "array",
        "description": "A single position, represented as [longitude, latitude] or [longitude, latitude, altitude].",
        "minItems": 2,
        "maxItems": 3,
        "items": {
          "type": "number"
        }
      },
      "GeoJSONLinearRing": {
        "type": "array",
        "description": "A closed linear ring, an array of four or more positions where the first and last positions are identical. Represents the boundary of a surface or a hole in a surface.",
        "minItems": 4,
        "items": {
          "$ref": "#/components/schemas/GeoJSONPosition"
        }
      },
      "GeoJSONPolygonCoordinates": {
        "type": "array",
        "description": "Array of linear rings",
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/GeoJSONLinearRing"
        }
      },
      "Zone": {
        "type": "object",
        "required": [
          "id",
          "geometry",
          "metadata",
          "serviceCity",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of service city zone"
          },
          "geometry": {
            "description": "A geoJSON [Polygon](https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6) or [MultiPolygon](https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.7)\n",
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "type",
                  "coordinates"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Polygon"
                    ]
                  },
                  "coordinates": {
                    "$ref": "#/components/schemas/GeoJSONPolygonCoordinates"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "type",
                  "coordinates"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "MultiPolygon"
                    ]
                  },
                  "coordinates": {
                    "type": "array",
                    "description": "Array of polygons",
                    "minItems": 1,
                    "items": {
                      "$ref": "#/components/schemas/GeoJSONPolygonCoordinates"
                    }
                  }
                }
              }
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Object that can contain miscellaneous props, but will always contain \"layer\""
          },
          "serviceCity": {
            "type": "string",
            "description": "Service city name"
          },
          "type": {
            "type": "string",
            "enum": [
              "pickup",
              "delivery",
              "surcharge"
            ]
          }
        }
      },
      "Region": {
        "type": "object",
        "required": [
          "pickup",
          "delivery",
          "surcharge"
        ],
        "properties": {
          "pickup": {
            "type": "array",
            "description": "Geographic areas that merchants can create deliveries for pickup from",
            "items": {
              "$ref": "#/components/schemas/Zone"
            }
          },
          "delivery": {
            "type": "array",
            "description": "Geographic areas that merchants can deliver to according to the standard delivery fees\n",
            "items": {
              "$ref": "#/components/schemas/Zone"
            }
          },
          "surcharge": {
            "type": "array",
            "description": "Geographic areas that are considered outside the standard delivery zone and could include a\nsurcharge fee in addition to the standard delivery fee\n",
            "items": {
              "$ref": "#/components/schemas/Zone"
            }
          }
        }
      },
      "SimplifiedDateISOString": {
        "description": "Date time in Simplified ISO8601 format `YYYY-MM-DDTHH:mm:ss.sssZ`\n\nNote that ISO date strings are always in UTC time.\n\nAn example: `2020-07-25T10:48:08.987Z`\n",
        "type": "string",
        "nullable": true
      },
      "DeliveryBase": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the contents being delivered",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "maxLength": 20,
            "description": "The order ID that this delivery is associated with."
          },
          "numLabels": {
            "type": "number",
            "minimum": 1,
            "default": 1,
            "description": "The number of labels for the delivery (each separate package needs a label).\n"
          },
          "deliveryValue": {
            "type": "number",
            "minimum": 0,
            "description": "The dollar value of the delivery in CAD as cents"
          },
          "deliveryEmail": {
            "type": "string",
            "format": "email",
            "description": "The email address of the recipient"
          },
          "deliveryPhone": {
            "type": "string",
            "description": "The cell phone number of the recipient, use a comma (,) to separate the phone number from its extension",
            "example": "+1234567890,123"
          },
          "deliveryName": {
            "type": "string",
            "description": "The name of the recipient"
          },
          "deliveryInstructions": {
            "type": "string",
            "nullable": true,
            "description": "Delivery instructions for drop off\n"
          },
          "metaField1": {
            "type": "string",
            "maxLength": 1024,
            "description": "Optional metadata field to store arbitrary data\n"
          },
          "metaField2": {
            "type": "string",
            "maxLength": 1024,
            "description": "Optional metadata field to store arbitrary data\n"
          },
          "metaField3": {
            "type": "string",
            "maxLength": 1024,
            "description": "Optional metadata field to store arbitrary data\n"
          }
        }
      },
      "DeliveryStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "- `draft`: The delivery is not currently scheduled.\n- `pending`: The delivery is scheduled and waiting for courier assignment.\n- `assigned`: The delivery is assigned to a courier.\n- `in-transit`: The delivery is in transit to the destination address.\n- `delivered`: The delivery has been delivered.\n- `undeliverable`: The delivery was attempted but could not be completed, and the delivery was returned.\n- `cancelled`: The delivery was cancelled.\n",
            "enum": [
              "draft",
              "pending",
              "assigned",
              "in-transit",
              "delivered",
              "undeliverable",
              "cancelled"
            ]
          }
        }
      },
      "AddressDetails": {
        "description": "Address details for read operations",
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressDetailsBase"
          },
          {
            "type": "object",
            "properties": {
              "province": {
                "type": "string",
                "description": "Full province or state name (e.g., Ontario, British Columbia, California)"
              },
              "country": {
                "type": "string",
                "description": "Full country name (e.g., Canada, United States)"
              },
              "latitude": {
                "type": "number",
                "format": "double",
                "description": "Latitude coordinate of the address"
              },
              "longitude": {
                "type": "number",
                "format": "double",
                "description": "Longitude coordinate of the address"
              }
            }
          }
        ]
      },
      "Delivery": {
        "description": "An order to be delivered",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DeliveryBase"
          },
          {
            "$ref": "#/components/schemas/DeliveryStatus"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for this delivery.\n"
              },
              "createdAt": {
                "$ref": "#/components/schemas/SimplifiedDateISOString"
              },
              "updatedAt": {
                "$ref": "#/components/schemas/SimplifiedDateISOString"
              },
              "locationId": {
                "type": "string",
                "description": "The ID of the location that the delivery will be associated with for billing purposes."
              },
              "sortOrder": {
                "type": "number",
                "minimum": 0,
                "description": "Represents the visit ordering of this delivery in a batch.\nLower values are estimated to be delivered before higher values. The value of this property could change\ndepending on the information we have of the courier at the time of the request, and/or if deliveries are removed from the batch.\n"
              },
              "sequence": {
                "type": "number",
                "nullable": true,
                "description": "Represents the fixed ordering at the time the delivery was batched. This is the same sequence number that appears on the\nlabel for this delivery and what couriers may ask for at pickup.\n"
              },
              "routeId": {
                "type": "string",
                "description": "Route container ID. In the case of a return, this will be the route ID of the original route not the return route.\n"
              },
              "externalId": {
                "type": "string",
                "maxLength": 256,
                "description": "The ID of the external entity that is associated to\nthis delivery (e.g. the external order or shipment ID).\n"
              },
              "requirements": {
                "$ref": "#/components/schemas/DeliveryRequirements"
              },
              "scanId": {
                "type": "string",
                "maxLength": 256,
                "description": "The ID embedded in your custom label's QR code. If\nnot specified, you will be required to use our built-in labels. If\nspecified, you will not be able to request our built-in label for this\ndelivery.\n"
              },
              "pickupAddress": {
                "$ref": "#/components/schemas/AddressDetails"
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/AddressDetails"
              },
              "giftSenderName": {
                "type": "string",
                "nullable": true,
                "description": "If this delivery is a gift then shows to the recipient instead of \"deliveryName\".\n"
              },
              "giftRecipientName": {
                "type": "string",
                "nullable": true,
                "description": "If this delivery is a gift then shows the recipient's name that is receiving the gift.\n"
              },
              "giftRecipientEmail": {
                "type": "string",
                "nullable": true,
                "format": "email",
                "description": "If this delivery is a gift, then shows the recipient's email that is receiving the gift.\n"
              },
              "giftRecipientPhone": {
                "type": "string",
                "nullable": true,
                "description": "If this delivery is a gift then shows the recipient's phone number that is receiving the gift, uses a comma (,) to separate the phone number from its extension.\n",
                "example": "+1234567890,123"
              },
              "pickedUpAt": {
                "$ref": "#/components/schemas/SimplifiedDateISOString"
              },
              "deliveredAt": {
                "$ref": "#/components/schemas/SimplifiedDateISOString"
              },
              "rate": {
                "$ref": "#/components/schemas/DeliveryRate"
              }
            }
          }
        ]
      },
      "PickupStartAt": {
        "description": "Specifies the start of the pickup window (i.e. the earliest time that the courier can arrive to pickup).\nThe second and millsecond time components of the date will be ignored.\n\nWhen specified, this value must match the start of an available pickup window.\n\nReview the available [pickup windows](https://trexity.zendesk.com/hc/en-us/articles/16940024932627-Pickup-windows).\n\n**Data type**\n\nDate time in Simplified ISO8601 format `YYYY-MM-DDTHH:mm:ss.sssZ`\n\nNote that ISO date strings are always in UTC time.\n\nAn example: `2020-07-25T10:48:08.987Z`\n",
        "type": "string",
        "nullable": true
      },
      "DeliverStartAt": {
        "description": "Specifies the start of the delivery window (i.e. the earliest time that the courier can complete the delivery).\nThe second and millsecond time components of the date will be ignored.\n\nWhen specified, this value must match the start of a suggested delivery window.\n\nThe delivery windows are unique to each of your locations within Trexity because they are determined by the market's pickup windows and each location's delivery SLA. A delivery SLA is the maximum amount of time a delivery can take (.e.g. 2 hours). The general formula for computing a delivery window for each pickup window is the following.\n\n```\ndeliveryWindowStart = pickupWindowStart\ndeliveryWindowEnd = pickupWindowEnd + deliverySLA\n```\n\nReview the available [pickup windows](https://trexity.zendesk.com/hc/en-us/articles/16940024932627-Pickup-windows).\nReview your suggested [delivery windows](https://merchant.trexity.com/api).\n\n**Data type**\n\nDate time in Simplified ISO8601 format `YYYY-MM-DDTHH:mm:ss.sssZ`\n\nNote that ISO date strings are always in UTC time.\n\nAn example: `2020-07-25T10:48:08.987Z`\n",
        "type": "string",
        "nullable": true
      },
      "DeliverEndAt": {
        "description": "Specifies the end of the delivery window (i.e. the latest time that the courier can complete the delivery).\nThe second and millsecond time components of the date will be ignored.\n\nWhen specified, this value must match the end of the suggested delivery window indicated by the value of `deliverStartAt`.\n\nThe delivery windows are unique to each of your locations within Trexity because they are determined by the market's pickup windows and each of your location's delivery SLA. A delivery SLA is the maximum amount of time a delivery can take (.e.g. 2 hours). The general formula for computing a delivery window for each pickup window is the following.\n\n```\ndeliveryWindowStart = pickupWindowStart\ndeliveryWindowEnd = pickupWindowEnd + deliverySLA\n```\n\nReview the available [pickup windows](https://trexity.zendesk.com/hc/en-us/articles/16940024932627-Pickup-windows).\nReview your suggested [delivery windows](https://merchant.trexity.com/api).\n\n**Data type**\n\nDate time in Simplified ISO8601 format `YYYY-MM-DDTHH:mm:ss.sssZ`\n\nNote that ISO date strings are always in UTC time.\n\nAn example: `2020-07-25T10:48:08.987Z`\n",
        "type": "string",
        "nullable": true
      },
      "DeliveryRequirementsDto": {
        "type": "object",
        "description": "Object representing the requirements that must be met by a courier in order\nfor them to be considered eligible for delivery.\n\nIf no requirements object is specified then the merchant location's default requirements\nwill be used.\n",
        "properties": {
          "vehicleType": {
            "type": "string",
            "description": "Describe the type of vehicle that must be used for a delivery.\n\n- any - Any vehicle type is allowed.\n- small - Sedan, hatchback, etc [example: Honda Civic]\n- medium - SUV or similar [example: Toyota Sienna]\n",
            "enum": [
              "any",
              "small",
              "medium"
            ]
          },
          "proofOfDelivery": {
            "type": "string",
            "enum": [
              "pin+signature",
              "pin",
              "photo"
            ],
            "description": "The proof of delivery that must be provided by the courier.\n\n- pin+signature - A PIN exchange and signature given by the recipient are required.\n- pin - A PIN exchange given by the recipient is required.\n- photo - A safe-drop is required with no proof of delivery.\n"
          },
          "containsAlcohol": {
            "type": "boolean",
            "description": "Contains any trace of alcohol."
          },
          "requiresLegalAgeVerification": {
            "type": "boolean",
            "description": "Requires legal age verification."
          },
          "perishable": {
            "type": "boolean",
            "description": "Must be delivered by a courier who is equipped to deliver perishable items."
          },
          "returnReusables": {
            "type": "boolean",
            "description": "Must be delivered by a courier who will return collected reusables back to pickup."
          }
        }
      },
      "DeliveryLoad": {
        "type": "object",
        "description": "Optional dimensions and weight of the delivery.\n\nThe maximum dimensions are 91 cm for any dimension. The maximum for weight is 15876 grams.\n",
        "properties": {
          "length": {
            "type": "integer",
            "minimum": 0,
            "maximum": 91,
            "description": "Length (in centimeters). Maximum is ~3 feet."
          },
          "width": {
            "type": "integer",
            "minimum": 0,
            "maximum": 91,
            "description": "Width (in centimeters). Maximum is ~3 feet."
          },
          "height": {
            "type": "integer",
            "minimum": 0,
            "maximum": 91,
            "description": "Height (in centimeters). Maximum is ~3 feet."
          },
          "weight": {
            "type": "integer",
            "minimum": 0,
            "maximum": 15876,
            "description": "Weight (in grams). Maximum is ~35 lbs."
          }
        }
      },
      "DeliveryDTO": {
        "description": "An order to be delivered",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DeliveryBase"
          },
          {
            "type": "object",
            "required": [
              "pickupAddress",
              "deliveryAddress",
              "deliveryName",
              "deliveryEmail",
              "orderId"
            ],
            "properties": {
              "pickupAddress": {},
              "deliveryAddress": {},
              "pickupStartAt": {},
              "deliveryName": {},
              "deliveryEmail": {},
              "orderId": {}
            }
          },
          {
            "type": "object",
            "properties": {
              "locationId": {
                "type": "string",
                "description": "The ID of the location that the delivery will be associated with for billing purposes. If not provided, the location will be inferred from the pickup address."
              },
              "pickupAddress": {
                "$ref": "#/components/schemas/AddressDetailsDTO"
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/AddressDetailsDTO"
              },
              "giftSenderName": {
                "type": "string",
                "nullable": true,
                "description": "If this delivery is a gift then use this field to set the gift sender's name to show to the recipient instead of \"deliveryName\".\n\n***If defining a gift, then all gift fields are required, otherwise set gift fields to null or blank.***\n"
              },
              "giftRecipientName": {
                "type": "string",
                "nullable": true,
                "description": "If this delivery is a gift then use this field to set the gift recipient's name that is receiving the gift.\n\n***If defining a gift, then all gift fields are required, otherwise set gift fields to null or blank.***\n"
              },
              "giftRecipientEmail": {
                "type": "string",
                "nullable": true,
                "format": "email",
                "description": "If this delivery is a gift then use this field to set the gift recipient's email that is receiving the gift.\n\n***If defining a gift, then all gift fields are required, otherwise set gift fields to null or blank.***\n"
              },
              "giftRecipientPhone": {
                "type": "string",
                "nullable": true,
                "description": "If this delivery is a gift then use this field to set the gift recipient's phone number that is receiving the gift, use a comma (,) to separate the phone number from its extension.\n\n***If defining a gift, then all gift fields are required, otherwise set gift fields to null or blank.***\n",
                "example": "+1234567890,123"
              },
              "pickupStartAt": {
                "$ref": "#/components/schemas/PickupStartAt"
              },
              "deliverStartAt": {
                "$ref": "#/components/schemas/DeliverStartAt"
              },
              "deliverEndAt": {
                "$ref": "#/components/schemas/DeliverEndAt"
              },
              "merchantPpid": {
                "type": "string",
                "description": "Partner-provided ID of the merchant. This ID can be used when querying for deliveries. Only used by Partner accounts."
              },
              "merchantName": {
                "type": "string",
                "description": "Partner-provided name of the merchant. This will be displayed in place of the merchant name defined in the merchant profile. Only used by Partner accounts."
              },
              "merchantPhone": {
                "type": "string",
                "description": "Partner-provided phone of the merchant. This will be displayed in place of the merchant phone defined in the merchant profile. Only used by Partner accounts."
              },
              "merchantEmail": {
                "type": "string",
                "description": "Partner-provided email of the merchant. This will be displayed in place of the merchant email defined in the merchant profile. Only used by Partner accounts."
              },
              "requirements": {
                "$ref": "#/components/schemas/DeliveryRequirementsDto"
              },
              "externalId": {
                "type": "string",
                "maxLength": 256,
                "description": "The ID of the external entity that is associated to\nthis delivery (e.g. the external order or shipment ID).\n"
              },
              "scanId": {
                "type": "string",
                "maxLength": 256,
                "description": "The ID embedded in your custom label's QR code. If\nnot specified, you will be required to use our built-in labels. If\nspecified, you will not be able to request our built-in label for this\ndelivery.\n"
              },
              "load": {
                "$ref": "#/components/schemas/DeliveryLoad"
              }
            }
          }
        ]
      },
      "DeliveryDTOUpdate": {
        "description": "The fields that can be updated for a delivery",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DeliveryBase"
          },
          {
            "type": "object",
            "properties": {
              "deliveryAddress": {
                "$ref": "#/components/schemas/AddressDetailsDTO"
              },
              "giftSenderName": {
                "type": "string",
                "nullable": true,
                "description": "If this delivery is a gift then use this field to set the gift sender's name to show to the recipient instead of \"deliveryName\".\n\n***If updating to not a gift, then set all gift fields to null or blank.***\n"
              },
              "giftRecipientName": {
                "type": "string",
                "nullable": true,
                "description": "If this delivery is a gift then use this field to set the gift recipient's name that is receiving the gift.\n\n***If updating to not a gift, then set all gift fields to null or blank.***\n"
              },
              "giftRecipientEmail": {
                "type": "string",
                "nullable": true,
                "format": "email",
                "description": "If this delivery is a gift then use this field to set the gift recipient's email that is receiving the gift.\n\n***If updating to not a gift, then set all gift fields to null or blank.***\n"
              },
              "giftRecipientPhone": {
                "type": "string",
                "nullable": true,
                "description": "If this delivery is a gift then use this field to set the gift recipient's phone number that is receiving the gift, use a comma (,) to separate the phone number from its extension.\n\n***If updating to not a gift, then set all gift fields to null or blank.***\n",
                "example": "+1234567890,123"
              },
              "requirements": {
                "$ref": "#/components/schemas/DeliveryRequirements"
              }
            }
          }
        ]
      },
      "WebhookEventName": {
        "type": "string",
        "enum": [
          "delivery.created",
          "delivery.updated",
          "delivery.deleted",
          "delivery.courier.accepted",
          "delivery.courier.arrived_at_pickup",
          "delivery.courier.picked_up",
          "delivery.courier.arrived_at_delivery",
          "delivery.courier.delivery_delivered",
          "delivery.courier.renounced",
          "delivery.cancelled",
          "delivery.on_hold",
          "delivery.picked_up",
          "delivery.delivered",
          "delivery.returning",
          "delivery.returned"
        ]
      },
      "Webhook": {
        "description": "A registered webhook",
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "merchantId",
          "type",
          "eventName",
          "url"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "merchantId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "merchant-webhook"
            ]
          },
          "eventName": {
            "$ref": "#/components/schemas/WebhookEventName"
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "OperatingHours": {
        "type": "object",
        "description": "The operating hours for a location",
        "required": [
          "days",
          "calendarDays"
        ],
        "properties": {
          "days": {
            "type": "array",
            "description": "The days of the week the location is open",
            "items": {
              "type": "object",
              "required": [
                "day",
                "ranges"
              ],
              "properties": {
                "day": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 6,
                  "description": "The day of the week the location is open where 0 is Sunday and 6 is Saturday",
                  "example": 0
                },
                "ranges": {
                  "type": "array",
                  "description": "The time ranges the location is open on a given day. If empty, the location is closed on this day.",
                  "items": {
                    "type": "object",
                    "required": [
                      "fromTime",
                      "toTime"
                    ],
                    "properties": {
                      "fromTime": {
                        "type": "string",
                        "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
                        "description": "The time the location is open from in the format HH:MM",
                        "example": "08:00"
                      },
                      "toTime": {
                        "type": "string",
                        "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
                        "description": "The time the location is open to in the format HH:MM",
                        "example": "18:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "calendarDays": {
            "type": "array",
            "description": "Calendar days during the year the location is open. These override any operating hours for days of the week.",
            "items": {
              "type": "object",
              "required": [
                "day",
                "ranges"
              ],
              "properties": {
                "day": {
                  "type": "string",
                  "pattern": "^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
                  "description": "A calendar date in the format MM-DD",
                  "example": "12-25"
                },
                "ranges": {
                  "type": "array",
                  "description": "The time ranges the location is open on a given calendar day. If empty, the location is closed on this day.",
                  "items": {
                    "type": "object",
                    "required": [
                      "fromTime",
                      "toTime"
                    ],
                    "properties": {
                      "fromTime": {
                        "type": "string",
                        "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
                        "description": "The time the location is open from in the format HH:MM",
                        "example": "08:00"
                      },
                      "toTime": {
                        "type": "string",
                        "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
                        "description": "The time the location is open to in the format HH:MM",
                        "example": "18:00"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MerchantLocation": {
        "description": "A Merchant Location",
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "disabledAt",
          "disabledReason",
          "name",
          "address",
          "serviceCity",
          "contactEmail",
          "contactName",
          "contactPhone",
          "contactTitle",
          "availableRequirements",
          "billingContactEmail",
          "timezone",
          "defaultRequiresPersonHandoff",
          "defaultContainsAlcohol",
          "defaultDeliveryInstructions",
          "defaultPickupInstructions",
          "lifetimeDeliveryCount",
          "lifetimeBatchesCount",
          "lastDeliveredAt",
          "operatingHours"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "disabledAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "The date and time the location was disabled",
            "example": "2021-01-01T00:00:00Z"
          },
          "disabledReason": {
            "type": "string",
            "description": "The reason the location is disabled",
            "example": "Invoice payment failed"
          },
          "name": {
            "type": "string",
            "description": "The name of the location",
            "example": "My Store in Nepean"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDetails"
          },
          "serviceCity": {
            "type": "string",
            "description": "The market name of the city the location operates under",
            "example": "Toronto, ON"
          },
          "contactEmail": {
            "type": "string",
            "description": "The email address of the contact that is used for customer service and notifications",
            "format": "email"
          },
          "contactName": {
            "type": "string",
            "description": "The name of the contact that is used for customer service and notifications"
          },
          "contactPhone": {
            "type": "string",
            "description": "The phone number of the contact that is used for customer service and notifications"
          },
          "contactTitle": {
            "type": "string",
            "nullable": true,
            "description": "The title of the contact that is used for customer service and notifications"
          },
          "availableRequirements": {
            "type": "object"
          },
          "billingContactEmail": {
            "type": "string",
            "nullable": true,
            "description": "The email address of the billing contact that is used for billing and invoicing",
            "format": "email"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the location",
            "example": "America/Toronto"
          },
          "defaultRequiresPersonHandoff": {
            "type": "boolean",
            "description": "The default `requiresPersonHandoff` setting that will apply to all deliveries associated to this location."
          },
          "defaultContainsAlcohol": {
            "type": "boolean",
            "description": "The default `containsAlcohol` setting that will apply to all deliveries associated to this location."
          },
          "defaultDeliveryInstructions": {
            "type": "string",
            "nullable": true,
            "description": "The default `deliveryInstructions` that will apply to all deliveries associated to this location."
          },
          "defaultPickupInstructions": {
            "type": "string",
            "nullable": true,
            "description": "The default `pickupInstructions` that will apply to all pickups associated to this location."
          },
          "lifetimeDeliveryCount": {
            "type": "number",
            "description": "The total number of deliveries completed for this location."
          },
          "lifetimeBatchesCount": {
            "type": "number",
            "description": "The total number of batches completed for this location."
          },
          "lastDeliveredAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "The date and time the last delivery was completed for this location."
          },
          "operatingHours": {
            "$ref": "#/components/schemas/OperatingHours"
          }
        }
      },
      "Receipt": {
        "description": "A receipt item that is part of a receipt",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "charge",
              "invoice",
              "penalty",
              "refund"
            ],
            "description": "The type of the receipt item"
          },
          "locationName": {
            "type": "string",
            "description": "The name of the location this receipt item is associated with",
            "example": "My Shop"
          },
          "locationTimeZone": {
            "type": "string",
            "description": "The location time zone IANA identifier",
            "example": "America/Toronto"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-12-12T15:21:19.564Z"
          },
          "description": {
            "type": "string",
            "description": "The invoice number or route ID the receipt item is associated with",
            "example": "TRX275915694-K0W"
          },
          "note": {
            "type": "string",
            "description": "The reason for the transaction",
            "example": ""
          },
          "orderIds": {
            "type": "array",
            "description": "The order IDs associated with the receipt item",
            "minItems": 1,
            "items": {
              "type": "string",
              "example": "WPFNKFYH-9469"
            }
          },
          "cost": {
            "type": "integer",
            "description": "The cost of the receipt item in cents",
            "example": 2800
          },
          "additions": {
            "type": "array",
            "description": "Array of surcharges and discounts, where discounts will have a negative amount",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "User friendly description",
                  "example": "Fuel surcharge"
                },
                "amount": {
                  "type": "integer",
                  "description": "The amount of the addition in cents",
                  "example": 57
                }
              }
            }
          },
          "subtotal": {
            "type": "integer",
            "description": "Receipt item subtotal (cost + additions) in cents",
            "example": 2857
          },
          "taxesPaid": {
            "type": "integer",
            "description": "Receipt item taxes in cents",
            "example": 371
          },
          "totalPaid": {
            "type": "integer",
            "description": "Receipt item total (subtotal + taxesPaid) in cents",
            "example": 3228
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "errors"
              ],
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized"
      },
      "403": {
        "description": "Forbidden"
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "errors"
              ],
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "422": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "errors"
              ],
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "429": {
        "description": "Rate Limit Exceeded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "errors"
              ],
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}