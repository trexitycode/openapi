{
  "openapi": "3.0.2",
  "info": {
    "version": "2.0",
    "title": "Trexity API",
    "license": {
      "name": "MIT",
      "url": "https://raw.githubusercontent.com/trexitycode/openapi/main/license"
    },
    "termsOfService": "https://trexity.com/terms-of-service/",
    "contact": {
      "email": "support@trexity.com",
      "url": "http://trexity.com"
    },
    "description": "# Issues\n\nPlease open [bug reports](https://github.com/trexitycode/openapi/issues/new?template=bug_report.md) or [feature requests](https://github.com/trexitycode/openapi/issues/new?template=feature_request.md) requests in the [issues](https://github.com/trexitycode/openapi/issues) board.\n\n# Usage Policy\n\n**(ADDED IN v1.7)**\n\nBy using this API to provide delivery rates to your users you agree to display the [Rate](#operation/getSimpleRate) `name` without modification.\nThe [Rate](#operation/getSimpleRate) `description` can be replaced with a custom value (e.g. Same-day, etc.) or displayed as-is from the Rate.\n\nThis allows Trexity to ensure consistent messaging wherever Trexity delivery rates are shown.\n\n## Suspension & Termination\n\nFailure to comply with this Usage Policy may result in suspension of your Trexity merchant account and/or API Keys. Continued failure to comply may result in the termination of your Trexity merchant account.\n\n# Concepts & Workflows\n\n## Concepts\n\n**Deliveries** represent an order, has customer information and a delivery address.\n\n## Preferred Workflow\n\nThis workflow is the most common and preferred way to create a delivery. Just provide a delivery,\nand optionally a pickup time to create a delivery.\n\n1. [Create a delivery](#operation/createDelivery) specify the delivery, customer information and delivery address\n2. [Get delivery label](#operation/getDeliveryLabel) for the delivery then affix to the delivery packaging\n\n## Delivery Status\n\nFollow the [Delivery Events](#section/Delivery-Events) guide to understand what webhooks you will need to listen to.\n\n## Sandbox Environment\n\nAll API operations have an alternate base URL available in the sandbox environment.\n\nTo use the sandbox environment:\n1. Create an account on the [Sandbox Merchant Portal](https://merchant.beta.trexity.com/signup)\n2. Navigate to the [API Keys page](https://merchant.beta.trexity.com/api/keys) in the Advanced area.\n3. Create a new API Key\n4. Use the new API Key and the sandbox base URL in your API requests\n\n> Use the dropdown in the top right of an API operation page to select the sandbox environment server.\n\n### Credit Cards\n\nWhen signing up for the sandbox environment you can use the  following\ncredit card with any 3-digit CVC and a future expiration date.\n\n```\n4000 0012 4000 0000\n```\n\n### Expectations\n\nThe sandbox environment is intended for development and testing purposes only.\nExpect latency to be higher than the production environment.\n\nWe use our sandbox environment as well when developing new features to ensure\nthere are no breaking changes. So expect the occasional breaking change when\nusing the sandbox environment.\n\n# Responses\n\nAll endpoints will return an object and if there is actual data\nto be returned, it is going to be named `data`, where `data` may\nbe an array or an object.\n\nIf there is an `error` field present on the root JSON object, that\nmeans something went wrong and that error message is all we know about it.\nAdditionally, in some cases, you may inspect the HTTP status codes to\ngather more information.\n\nPlease check our payload/response examples in detail as well as the\ncurl examples that are a part of each section that documents an operation.\n\nExample of a successful response:\n`{ data: ... }`\n\nExample of a response with an error:\n`{ error: 'Some error message', data: null }`\n"
  },
  "tags": [
    {
      "name": "Addresses",
      "description": "Group of endpoints for handling addresses.\n\n### Address Formatting\n\nIn general wherever an address is expected the format we accept is:\n\n```\nSTREET, CITY PROVINCE POSTAL_CODE, COUNTRY\n```\n\nHowever, we also accept newlines and/or commas delimiting each component.\n\n**Good:**\n```\n123 Fake St, Ottawa ON, Canada\n123 Fake St, Toronto, Ontario, Canada\n123 Fake St, Toronto, Ontario, B4T 3F5, Canada\n```\n\n**Better:**\n```\n123 Fake St, Ottawa ON K2G 8F2, CA\n123 Fake St, Toronto ON M4T 5F6, CA\n123 Fake St, Toronto ON B4T 3F5, CA\n```\n\n## Apartment / Unit / Suite\n\nTo specify an apartment, unit or suite as part of the address use the following\nformat (for example if the apartment number was 4):\n```\n4-123 Fake St, Ottawa ON, K2G 8FT Canada\n123 Fake St Apt 4, Ottawa ON, K2G 8FT Canada\n123 Fake St Apartment 4, Ottawa ON, K2G 8FT Canada\n123 Fake St Unit 4, Ottawa ON, K2G 8FT Canada\n123 Fake St Suite 4, Ottawa ON, K2G 8FT Canada\n123 Fake St #4, Ottawa ON, K2G 8FT Canada\n```\n"
    },
    {
      "name": "Shipping Rates",
      "description": "Prior to creating a Delivery, you can calculate the rates based on the pickup address and the number of stops the driver has to do.\nSee our [rates](/#operation/getSimpleRate) endpoint for more information.\n"
    },
    {
      "name": "Deliveries",
      "description": "The most common approach to get a delivery on the road is to:\n  * [Create a Delivery](/#operation/createDelivery)\n\nYou can schedule the posting of the Delivery in the future.\nTrexity guarantees that the scheduled Delivery will not be posted or broadcast prior to the time it was scheduled for.\nPlease see the [details](/#operation/createDelivery) here.\n"
    },
    {
      "name": "Parcels",
      "description": "Convenient API endpionts for managing delivery parcels.\n"
    },
    {
      "name": "Receipts",
      "description": "Retrieve receipt information\n"
    },
    {
      "name": "Storage",
      "description": "Storage related operations.\n\n> IMPORTANT: These operations have a different server URL.\n"
    },
    {
      "name": "Webhooks",
      "description": "Retrieve and manage webhooks for a Trexity Merchant.\n\n## Parcel Events\n\nA Delivery is a parcel with its own delivery address.\nAs activity occurs on a parcel the Delivery's `currentStatus` oscilates between `OUT_FOR_DELIVERY`,\n`ARRIVED_AT_DELIVERY` and `DELIVERED`.\n\nTo listen to delivery events listen to the following webhooks:\n- `parcel.created` The parcel has been created during shipment creation or update\n- `parcel.updated` The parcel has been updated during shipment update\n- `parcel.deleted` The parcel has been deleted during shipment udpate\n- `parcel.picked_up` The driver has scanned and picked up a parcel\n- `parcel.delivered` The driver has scanned and delivered a parcel\n- `parcel.returning` The driver is returning a parcel\n- `parcel.returned` The driver has returned a parcel to pickup address\n\nThe request payload of these webhook events indicate the delivery that is currently\nbeing affected.\n\n## Storing The deliveryId\n\nIf you have the need to update pickup-related information such as the pickup address, POD settings,\nor the pickup instructions, or you are polling the delivery endpoints for the status of the delivery\nthen you will need to store and reference the `deliveryId`. However, the `deliveryId` can change for\na parcel if the parcel is moved, cloned or bundled. You can re-map your orders/parcels by listening to\nthe `delivery.created` webhook.\n\n> You will need to ensure that you provide a value for a delivery's `externalId` field when you create one.\n> This field is intended to be an identifier that references back to your system.\n\n```js\n// This sample code uses Nodejs with Express\nfunction trexity_deliveryCreated (req, res, next) {\n  const deliveryId = req.body.data.id\n  const deliveries = body.deliveries\n  const promises = []\n\n  for (const delivery of deliveries) {\n    const orderId = delivery.externalId\n\n    // Generally this is where you would update the Trexity shipment ID associated to your order.\n    //\n    // For example update the metadata associated to your order where the orders_metadata table\n    // has at least the following columns: order_id, key, and value, and there is a unique constraint\n    // on the order_id:key column pair. The end result is that the metadata field will be upserted.\n    const promise = executeParameterizedSql(`\n      INSERT INTO orders_metadata (order_id, key, value)\n      VALUES ($1, 'trexity_shipment_id', $2)\n      ON CONFLICT\n      DO UPDATE set value = EXCLUDED.value\n    `, [orderId, shipmentId])\n\n    promises.push(promise)\n  }\n\n  Promise.allSettled(promises)\n    .then(() => res.status(200).json({}))\n}\n```\n\n## Verifying Webhook Requests\n\nAll webhook requests have a header that contains a signature signed with the Trexity Merchant's\nwebhook secret as found in their \"Trexity API\" settings. To verify the signature take the raw\nrequest body as text and create a SHA256 HMAC signed with the merchant's webhook secret and covert to hex.\n\nExample:\n```\n// nodejs\nconst text = await new Promise((resolve, reject) => {\n  const buff = []\n  req.setEncoding('utf8')\n  req.on('data', chunk => (buff.push(chunk)))\n  req.once('end', resolve(buff.join('')))\n  req.once('error', reject)\n})\n\nconst sig = require('crypto')\n  .createHmac('sha256', process.env.TRX_MERCH_WEBHOOK_SECRET)\n  .update(text)\n  .digest('hex')\n\nconst isValid = req.headers['x-trexity-signature'] === sig\n\nif (!isValid) {\n  res.statusCode = 403\n  res.end('Forbidden', 'utf8')\n  return\n}\n\nconst body = JSON.parse(body)\n// ...\n```\n"
    },
    {
      "name": "Locations",
      "description": "Retrieve and manage Locations for a Trexity Merchant.\n"
    },
    {
      "name": "Regions",
      "description": "Region related operations that usually involve service cities and their zones\n"
    }
  ],
  "servers": [
    {
      "description": "production",
      "url": "https://trexity.app/api/v2"
    },
    {
      "description": "sandbox",
      "url": "https://trexity-driver-mobile.uc.r.appspot.com/api/v2"
    }
  ],
  "components": {
    "securitySchemes": {
      "MerchantApiKeyAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "This authentication strategy uses a Trexity Merchant API KEY. This API KEY is used\nas a bearer token.\n\nIn order to obtain a Trexity Merchant API key, you need to sign-up as Merchant at https://merchant.trexity.com/\nand create an API KEY through your merchant portal.\n\nFeel free to contact support@trexity.com for any questions you may have.\n\nExample:\n```\ncurl -X POST {server-url}/rates/simple \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer <Merchant API Key>' \\\n  -d '{\n    \"pickupAddress\": \"9 Slack Rd, Nepean ON K2G 0B7, CA\",\n    \"deliveryAddress\": \"207 Queen St, Ottawa ON K1P 6E5, CA\",\n    \"requirements\": {},\n    \"orderValue\": 2500\n  }'\n```\n\nPlease check our [curl examples](/#operation/getSimpleRate) for more examples.\n"
      },
      "AccessTokenAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "This authentication stratigy requires an access token used as a 'Bearer' token.\n\nCurrently access tokens are only obtained and used by trusted services.\n\nExample:\n```\n// nodejs\nrequire('http').get('{server-url}/{endpoint}', {\n  headers: {\n    accept: 'application/json',\n    authorization: `Bearer ${process.env.ACCESS_TOKEN}`\n  }\n}, (res) => {\n  // ... handle response\n})\n```\n"
      }
    },
    "schemas": {
      "DeliveryWindowProps": {
        "type": "object",
        "properties": {
          "pickupAfter": {
            "description": "**(ADDED IN v1.12)** Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\n**If present then deliverAfter and deliverBefore are ignored.**\n\nIf in the past then defaults to ASAP.\nCan be set to `new Date().toISOString()` or `\"ASAP\"` for ASAP.\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n\nAn example: ASAP\n",
            "type": "string"
          },
          "deliverAfter": {
            "description": "**(ADDED IN v1.10)** Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nIf in the past then defaults to ASAP, and must be less than or equal to `deliverBefore` if `deliverBefore` is provided.\nCan be set to `new Date().toISOString()` or `\"ASAP\"` for ASAP.\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n\nAn example: ASAP\n",
            "type": "string"
          },
          "deliverBefore": {
            "description": "**(ADDED IN v1.10)** Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nCannot be in the past.\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n",
            "type": "string"
          }
        }
      },
      "Address": {
        "description": "Address in the format \"STREET, CITY PROVINCE POSTAL_CODE, COUNTRY\" (e.g. \"456 Elgin St, Ottawa ON K2P 1N5, CA\").\n\nSee [Addresses](#tag/Addresses)\n",
        "type": "string",
        "maxLength": 512
      },
      "ShipmentRequirements": {
        "type": "object",
        "description": "Object representing the requirements that must be met by a driver in order\nfor them to be considered for delivery.\n\nIf no requirements object is specified then the merchant location's default requirements\nwill be used.\n",
        "properties": {
          "vehicleType": {
            "type": "string",
            "description": "Describe the type of vehicle that must be used for a shipment.\n\n- small - Sedan, hatchback, etc [example: Honda Civic]\n- medium - SUV or similar [example: Toyota Sienna]\n",
            "enum": [
              "small",
              "medium"
            ]
          },
          "legalAgeAlcohol": {
            "type": "boolean",
            "description": "Contains any trace of alcohol.\n"
          },
          "perishable": {
            "type": "boolean",
            "description": "Must be delivered by a driver who is equipped to deliver perishable items.\n"
          },
          "returnReusables": {
            "type": "boolean",
            "description": "Must be delivered by a driver who will return collected reusables back to pickup.\n"
          },
          "custom pricing": {
            "type": "boolean",
            "description": "Please contact a Trexity support agent for custom pricing options.\n"
          }
        }
      },
      "SimpleRatePayload": {
        "description": "A minimal object that describes a direct shipment",
        "allOf": [
          {
            "$ref": "#/components/schemas/DeliveryWindowProps"
          },
          {
            "type": "object",
            "required": [
              "deliveryAddress"
            ],
            "properties": {
              "pickupAddress": {
                "$ref": "#/components/schemas/Address"
              },
              "numLabels": {
                "type": "number",
                "minimum": 1,
                "default": 1,
                "description": "**(added in 1.12)** The number of labels for the parcel (each separate package needs a label).\n"
              },
              "deliveryAddress": {
                "type": "string",
                "description": "An address",
                "items": {
                  "$ref": "#/components/schemas/Address"
                }
              },
              "requirements": {
                "$ref": "#/components/schemas/ShipmentRequirements"
              },
              "orderValue": {
                "type": "number",
                "minimum": 0,
                "description": "The order value, if any. Specified in cents."
              }
            }
          }
        ]
      },
      "GeoJSONDirectionsResult": {
        "type": "object",
        "nullable": true,
        "description": "GeoJSON object that defines the path of the Shipment, taking into account multiple dropoffs (if any).\n\nGeoJSON is defined at https://tools.ietf.org/html/rfc7946\n\nWe are defining the geometry of the path using an array of LineString, which in plain English means\n\npiecewise linear segments connected on the map.\n"
      },
      "Rate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the rate to show to the customer (if applicable)"
          },
          "description": {
            "type": "string",
            "description": "**(ADDED IN v1.7)** The description of the rate to show to the customer (if applicable)\n"
          },
          "total": {
            "type": "number",
            "description": "The total fee in cents for delivery with taxes."
          },
          "deliveryWithoutTaxes": {
            "type": "number",
            "description": "**(ADDED IN v1.12)** The total fee in cents for the delivery portion of the rate.\n"
          },
          "fuelWithoutTaxes": {
            "type": "number",
            "description": "**(ADDED IN v1.12)** The total fee in cents for fuel cost portion of the rate.\n"
          },
          "surchargesWithoutTaxes": {
            "type": "array",
            "description": "**(ADDED IN v1.14)** The breakdown of each surcharge before taxes added to the rate\n",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "oversized",
                    "distance",
                    "large-vehicle"
                  ],
                  "description": "The surcharge type.\n\n- `oversized` applied for a surplus of labels\n- `distance` applied for long distance deliveries\n- `large-vehicle` applied for shipments that require a medium or large vehicle\n"
                },
                "amount": {
                  "type": "number",
                  "description": "The amount in cents of the surcharge"
                }
              }
            }
          },
          "totalWithoutTaxes": {
            "type": "number",
            "description": "The total fee in cents for entire delivery without taxes.\n\nEquates to the sum of\n- `deliveryWithoutTaxes`\n- `fuelWithoutTaxes`\n- total `amount` from `surchargesWithoutTaxes`\n"
          },
          "taxRates": {
            "type": "object",
            "description": "**(ADDED IN v1.1)** An object whos keys are tax rate codes and value is the tax rate.\n",
            "additionalProperties": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "exclusiveMinimum": true,
              "exclusiveMaximum": true
            }
          },
          "taxAmounts": {
            "type": "object",
            "description": "**(ADDED IN v1.12)** An object whos keys are tax rate codes and value is the tax amount charged in cents.\n",
            "additionalProperties": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "exclusiveMinimum": true,
              "exclusiveMaximum": true
            }
          },
          "totalTaxes": {
            "type": "number",
            "description": "**(ADDED IN v1.12)** The total taxes charged in cents.\n"
          },
          "directionsResult": {
            "$ref": "#/components/schemas/GeoJSONDirectionsResult"
          },
          "pickupDeliveryDistance": {
            "type": "number",
            "description": "Estimated distance (in meters) that the driver would need to drive (starting from the pickup location) in order to finalize this shipment (takes into account multiple dropoffs, if any)."
          },
          "pickupDeliveryDuration": {
            "type": "number",
            "description": "Estimated duration (in seconds) of the entire trip (starting from the pickup location) that the driver would have to make in order to finalize this shipment (takes into account multiple dropoffs, if any).\n"
          },
          "orderIds": {
            "type": "array",
            "description": "**(ADDED IN v1.30)** The order IDs that this rate is for. Applicable only to complex rates.\n",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SimpleRate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Rate"
          },
          {
            "type": "object",
            "properties": {
              "estimateScheduledPostAt": {
                "description": "**(add in 1.10)** Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n",
                "type": "string"
              },
              "estimatePickupAt": {
                "description": "**(add in 1.10)** Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n",
                "type": "string"
              },
              "estimateDeliverAt": {
                "description": "**(add in 1.10)** Date time in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n",
                "type": "string"
              }
            }
          }
        ]
      },
      "SimpleRateResponse": {
        "description": "Returns all rates that apply for this Shipment. Each rate will have the distance (in meters), duration (in seconds) of the trip\nand the fee (in Canadian cents).\n",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleRate"
            }
          }
        }
      },
      "PickupStartAt": {
        "description": "Specifies the start of the pickup window for the shipment (i.e. the earliest time that the driver can arrive to pickup the shipment).\nThe second and millsecond time components of the date will be ignored.\n\nWhen specified, this value must match the start of an available pickup window.\n\nReview the available [pickup windows](https://trexity.zendesk.com/hc/en-us/articles/16940024932627-Pickup-windows).\n\n**Data type**\n\nDate time in Simplified ISO8601 format `YYYY-MM-DDTHH:mm:ss.sssZ`\n\nNote that ISO date strings are always in UTC time.\n\nAn example: `2020-07-25T10:48:08.987Z`\n",
        "type": "string",
        "nullable": true
      },
      "PickupEndAt": {
        "description": "Specifies the end of the pickup window for the shipment (i.e. the latest time that the driver can arrive to pickup the shipment).\nThe second and millsecond time components of the date will be ignored.\n\nWhen specified, this value must match the end of the available pickup window indicated by the value of `pickupStartAt`.\n\nReview the available [pickup windows](https://trexity.zendesk.com/hc/en-us/articles/16940024932627-Pickup-windows).\n\n**Data type**\n\nDate time in Simplified ISO8601 format `YYYY-MM-DDTHH:mm:ss.sssZ`\n\nNote that ISO date strings are always in UTC time.\n\nAn example: `2020-07-25T10:48:08.987Z`\n",
        "type": "string",
        "nullable": true
      },
      "DeliverStartAt": {
        "description": "Specifies the start of the deliver window for the shipment (i.e. the earliest time that the driver can deliver the shipment).\nThe second and millsecond time components of the date will be ignored.\n\nWhen specified, this value must match the start of a suggested delivery window.\n\nThe delivery windows are unique to each of your locations within Trexity because they are determined by the market's pickup windows and each location's delivery SLA. A delivery SLA is the maximum amount of time a delivery can take (.e.g. 2 hours). The general formula for computing a delivery window for each pickup window is the following.\n\n```\ndeliveryWindowStart = pickupWindowStart\ndeliveryWindowEnd = pickupWindowEnd + deliverySLA\n```\n\nReview the available [pickup windows](https://trexity.zendesk.com/hc/en-us/articles/16940024932627-Pickup-windows).\nReview your suggested [delivery windows](https://merchant.trexity.com/api).\n\n**Data type**\n\nDate time in Simplified ISO8601 format `YYYY-MM-DDTHH:mm:ss.sssZ`\n\nNote that ISO date strings are always in UTC time.\n\nAn example: `2020-07-25T10:48:08.987Z`\n",
        "type": "string",
        "nullable": true
      },
      "DeliverEndAt": {
        "description": "Specifies the start of the deliver window for the shipment (i.e. the latest time that the driver can deliver the shipment).\nThe second and millsecond time components of the date will be ignored.\n\nWhen specified, this value must match the end of the suggested delivery window indicated by the value of `deliverStartAt`.\n\nThe delivery windows are unique to each of your locations within Trexity because they are determined by the market's pickup windows and each of your location's delivery SLA. A delivery SLA is the maximum amount of time a delivery can take (.e.g. 2 hours). The general formula for computing a delivery window for each pickup window is the following.\n\n```\ndeliveryWindowStart = pickupWindowStart\ndeliveryWindowEnd = pickupWindowEnd + deliverySLA\n```\n\nReview the available [pickup windows](https://trexity.zendesk.com/hc/en-us/articles/16940024932627-Pickup-windows).\nReview your suggested [delivery windows](https://merchant.trexity.com/api).\n\n**Data type**\n\nDate time in Simplified ISO8601 format `YYYY-MM-DDTHH:mm:ss.sssZ`\n\nNote that ISO date strings are always in UTC time.\n\nAn example: `2020-07-25T10:48:08.987Z`\n",
        "type": "string",
        "nullable": true
      },
      "DeliveryLoad": {
        "type": "object",
        "description": "Optional dimensions and weight of the delivery. This\nwill inform the driver matching algorithm accordingly.\n\nThe maximums have changed from 130 cm length, 80 cm width\nand 80 cm height, to 91 cm for any dimension. The maximum for weight changed from\n30000 grams to 15876.\n\nThe maximum weight changed from 15876 to 9072 grams to coincides\nwith our merchant code of conduct policy.\n\nThe maximum weight changed from 9072 back to 15876 grams to give\nmerchants time to adjust to the new weight limit.\n",
        "properties": {
          "length": {
            "type": "integer",
            "minimum": 0,
            "maximum": 91,
            "description": "Length (in centimeters). Maximum is ~3 feet."
          },
          "width": {
            "type": "integer",
            "minimum": 0,
            "maximum": 91,
            "description": "Width (in centimeters). Maximum is ~3 feet."
          },
          "height": {
            "type": "integer",
            "minimum": 0,
            "maximum": 91,
            "description": "Height (in centimeters). Maximum is ~3 feet."
          },
          "weight": {
            "type": "integer",
            "minimum": 0,
            "maximum": 15876,
            "description": "Weight (in grams). Maximum is ~35 lbs."
          }
        }
      },
      "DirectDeliveryPayload": {
        "description": "Payload object used to identify a shipment from a pickup address to a delivery address",
        "type": "object",
        "required": [
          "pickupAddress",
          "deliveryAddress",
          "deliveryName",
          "description",
          "orderId",
          "parcelValue"
        ],
        "properties": {
          "pickupStartAt": {
            "$ref": "#/components/schemas/PickupStartAt"
          },
          "pickupEndAt": {
            "$ref": "#/components/schemas/PickupEndAt"
          },
          "deliverStartAt": {
            "$ref": "#/components/schemas/DeliverStartAt"
          },
          "deliverEndAt": {
            "$ref": "#/components/schemas/DeliverEndAt"
          },
          "pickupAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "pickupAddressNotes": {
            "type": "string",
            "description": "Extra information relating to the pickup address ONLY, like the apartment/unit number."
          },
          "pickupInstructions": {
            "type": "string",
            "description": "**(renamed from pickupNotes to pickupInstructions in v1.16) pickupNotes will still be accepted**\nSpecial notes or instructions regarding pickup like the description of the location, what door to use, etc.\n"
          },
          "merchantPpid": {
            "type": "string",
            "description": "Partner-provided ID of the merchant. This ID can be used when querying for shipments. Only used by Partner accounts.\n"
          },
          "merchantName": {
            "type": "string",
            "description": "Partner-provided name of the merchant. This will be displayed in place of the merchant name defined in the merchant profile. Only used by Partner accounts.\n"
          },
          "merchantPhone": {
            "type": "string",
            "description": "Partner-provided phone of the merchant. This will be displayed in place of the merchant phone defined in the merchant profile. Only used by Partner accounts.\n"
          },
          "merchantEmail": {
            "type": "string",
            "description": "Partner-provided email of the merchant. This will be displayed in place of the merchant email defined in the merchant profile. Only used by Partner accounts.\n"
          },
          "requirements": {
            "$ref": "#/components/schemas/ShipmentRequirements"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "deliveryAddressNotes": {
            "type": "string",
            "description": "Extra notes relating to the delivery address, such as apartment/unit number, reference, description of the location, etc."
          },
          "deliveryInstructions": {
            "type": "string",
            "description": "Delivery instructions for drop off\n"
          },
          "deliveryName": {
            "type": "string",
            "description": "The name of the recipient"
          },
          "description": {
            "type": "string",
            "description": "Description of the parcel being delivered"
          },
          "orderId": {
            "type": "string",
            "maxLength": 20,
            "description": "The order ID that this parcel belongs to."
          },
          "parcelValue": {
            "type": "number",
            "minimum": 0,
            "description": "The dollar value of the parcel in CDN as cents"
          },
          "numLabels": {
            "type": "number",
            "minimum": 1,
            "default": 1,
            "description": "The number of labels for the parcel (each separate package needs a label).\n"
          },
          "deliveryEmail": {
            "type": "string",
            "format": "email",
            "description": "The email address of the recipient"
          },
          "deliveryPhone": {
            "type": "string",
            "description": "The cell phone number of the recipient"
          },
          "requiresPersonHandoff": {
            "type": "boolean",
            "description": "Does this parcel require delivery PIN verification?"
          },
          "containsAlcohol": {
            "type": "boolean",
            "description": "**(ADDED IN v1.8)** Does this parcel contain alcoholic products?\n"
          },
          "externalId": {
            "type": "string",
            "maxLength": 256,
            "description": "The ID of the external entity that is associated to this delivery (e.g.\nthe external order or shipment ID).\n"
          },
          "scanId": {
            "type": "string",
            "maxLength": 256,
            "description": "The ID embedded in your custom label’s QR code. If\nnot specified, you will be required to use our built-in labels. If\nspecified, you will not be able to request our built-in label for this\nparcel.\n"
          },
          "load": {
            "$ref": "#/components/schemas/DeliveryLoad"
          },
          "metadata": {
            "type": "object",
            "description": "The metadata fields associated to the parcel. If the intent is to\nlist shipments with this metadata field, then ensure the value is\nsaved as a string and not say a number.\n"
          }
        }
      },
      "ComplexRateStatusResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "A unique identifier for the asynchronous request. This can be used to retrieve the results\nof a request when it has completed.\n"
          },
          "callbackInSeconds": {
            "type": "integer",
            "description": "An estimated number of seconds to complete the request.\nWait this long before checking the status again.\n"
          },
          "isCompleted": {
            "type": "boolean",
            "description": "Specifies if the request has completed."
          }
        }
      },
      "ComplexRateResultResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "The message of the error"
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "PICKUP_ADDRESS_INVALID",
                    "PICKUP_NO_GEOCODE",
                    "PICKUP_OUTSIDE_SERVICE_AREA",
                    "DELIVERY_ADDRESS_INVALID",
                    "DELIVERY_NO_GEOCODE",
                    "DELIVERY_OUTSIDE_SERVICE_AREA",
                    "SYSTEM_ERROR"
                  ],
                  "description": "The error code that identifies the error"
                },
                "orderId": {
                  "type": "string",
                  "description": "The \"orderId\" of the parcel this error relates to"
                },
                "params": {
                  "type": "object",
                  "description": "An object that contains extra information related to the error (i.e.\naddress, etc.)\n"
                }
              }
            }
          },
          "result": {
            "type": "object",
            "properties": {
              "rateId": {
                "type": "string",
                "description": "This rate response expires after 8 hours, and can be converted to\nshipments using the [Bulk Shipment Creation](/#operation/createCreateBulkShipmentsRequest)\nendpoint, and this rateId. Please note that pricing may differ\nbetween this rate response and the creation process, where the\nlikelihood of drift increases with time.\n"
              },
              "rates": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Rate"
                }
              },
              "unservedOrderIds": {
                "type": "array",
                "description": "Array of order IDs that could not be assigned to a shipment due to\ndelivery constraints\n",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Location": {
        "description": "A location described by latitude and longitude",
        "type": "object",
        "nullable": true,
        "properties": {
          "latitude": {
            "type": "number",
            "minimum": -90,
            "maximum": 90
          },
          "longitude": {
            "type": "number",
            "minimum": -180,
            "maximum": 90
          }
        }
      },
      "SimplifiedDateISOString": {
        "description": "Date time in Simplified ISO8601 format `YYYY-MM-DDTHH:mm:ss.sssZ`\n\nNote that ISO date strings are always in UTC time.\n\nAn example: `2020-07-25T10:48:08.987Z`\n",
        "type": "string",
        "nullable": true
      },
      "Delivery": {
        "description": "A order to be delivered in a shipment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this delivery.\n"
          },
          "numLabels": {
            "type": "number",
            "minimum": 1,
            "default": 1,
            "description": "The number of labels for the parcel (each separate package needs a label).\n"
          },
          "sortOrder": {
            "type": "number",
            "minimum": 0,
            "description": "Represents the ascending order of this delivery in relation to other deliveries in a shipment.\nLower values are estimated to be delivered before higher values. The value of this property could change\ndepending on the information we have of the courier at the time of the request, and/or if deliveries are removed from the shipment.\n"
          },
          "sequence": {
            "type": "number",
            "description": "Represents the fixed ascending order of this delivery in relation to other deliveries in a shipment\nas known at the time the delivery was created. This is the same sequence number that appears on the\nlabel for this delivery and what couriers may ask for at pickup. *Only present if there is more than one delivery.*\n"
          },
          "routeId": {
            "type": "string",
            "description": "Route container ID. In the case of a return, this will be the route ID of the original route (not the newly created return route)\n"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "deliveryAddressLocation": {
            "$ref": "#/components/schemas/Location"
          },
          "deliveryAddressProvince": {
            "type": "string",
            "nullable": true,
            "description": "The province of the deliveryAddress. Example: Ontario.\n"
          },
          "deliveryAddressCountry": {
            "type": "string",
            "nullable": true,
            "description": "The country of the deliveryAddress. Example: Canada.\n"
          },
          "deliveryAddressCity": {
            "type": "string",
            "nullable": true,
            "description": "The city of the pickupAddress. Example: Ottawa.\n"
          },
          "deliveryAddressServiceCity": {
            "type": "string",
            "nullable": true,
            "description": "The service city of the pickupAddress. Example: Ottawa, ON.\n"
          },
          "deliveryAddressNotes": {
            "type": "string",
            "description": "Extra notes relating to the delivery address, such as apartment/unit number, reference, description of the location, etc."
          },
          "deliveryInstructions": {
            "type": "string",
            "description": "Delivery instructions for drop off\n"
          },
          "deliveryName": {
            "type": "string",
            "description": "The name of the recipient"
          },
          "deliveryEmail": {
            "type": "string",
            "format": "email",
            "description": "The email address of the recipient"
          },
          "deliveryPhone": {
            "type": "string",
            "description": "The cell phone number of the recipient"
          },
          "description": {
            "type": "string",
            "description": "Description of the parcel being delivered"
          },
          "orderId": {
            "type": "string",
            "maxLength": 20,
            "description": "The order ID that this parcel belongs to."
          },
          "deliveryValue": {
            "type": "number",
            "minimum": 0,
            "description": "The dollar value of the parcel in CDN as cents"
          },
          "requiresPersonHandoff": {
            "type": "boolean",
            "description": "Does this parcel require delivery PIN verification?"
          },
          "containsAlcohol": {
            "type": "boolean",
            "description": "Requires legal age verification by law\n"
          },
          "externalId": {
            "type": "string",
            "maxLength": 256,
            "description": "The ID of the external entity that is associated to\nthis parcel (e.g. the external order or shipment ID).\n"
          },
          "scanId": {
            "type": "string",
            "maxLength": 256,
            "description": "The ID embedded in your custom label’s QR code. If\nnot specified, you will be required to use our built-in labels. If\nspecified, you will not be able to request our built-in label for this\nparcel.\n"
          },
          "load": {
            "$ref": "#/components/schemas/DeliveryLoad"
          },
          "metadata": {
            "type": "object",
            "description": "Object with metadata fields. If the intent is to\nlist shipments with this metadata field, then ensure the value is\nsaved as a string and not say a number.\n"
          },
          "driverDeliveredAt": {
            "$ref": "#/components/schemas/SimplifiedDateISOString"
          },
          "isDelivered": {
            "type": "boolean",
            "description": "Whether this delivery has been delivered.\nIf it has been, we store the timestamp in driverDeliveredAt.\n"
          },
          "secondsFromPickupToDelivery": {
            "type": "number",
            "description": "If a driver has accpeted, the estimated seconds it will take the driver to arrive at the pickup address."
          }
        }
      },
      "DeliveryResponse": {
        "description": "The delivery reponse object",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Delivery"
          }
        }
      },
      "WebhookEventName": {
        "type": "string",
        "enum": [
          "shipment.created",
          "shipment.updated",
          "shipment.deleted",
          "shipment.posted",
          "shipment.driver.accepted",
          "shipment.driver.arrived_at_pickup",
          "shipment.driver.picked_up",
          "shipment.driver.arrived_at_delivery",
          "shipment.driver.parcel_delivered",
          "shipment.completed",
          "shipment.cancelled",
          "shipment.driver.renounced",
          "shipment.on_hold",
          "parcel.picked_up",
          "parcel.delivered",
          "parcel.returning",
          "parcel.returned"
        ]
      },
      "Webhook": {
        "description": "A registered webhook",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "merchantId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "merchant-webhook"
            ]
          },
          "eventName": {
            "$ref": "#/components/schemas/WebhookEventName"
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "DeliveryWebhookPayload": {
        "description": "Webhook payload during a delivery event.",
        "required": [
          "data",
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "description": "Date time the event took place in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n",
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Delivery"
          }
        }
      },
      "ParcelWebhookPayload": {
        "description": "Webhook payload during a parcel event.",
        "required": [
          "data",
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "description": "Date time the event took place in Simplified ISO8601 format YYYY-MM-DDTHH:mm:ss.sssZ\n\nNote that ISO date strings are always in UTC time.\n\nAn example: 2020-07-25T10:48:08.987Z\n",
            "type": "string"
          },
          "data": {
            "properties": {
              "shipmentId": {
                "type": "string",
                "description": "The ID of the delivery containing the parcel affected. In the case of a return, this ID will be for the newly created return shipment."
              },
              "deliveryIndex": {
                "type": "integer",
                "description": "The index of the parcel affected within the delivery."
              },
              "deliveryId": {
                "type": "string",
                "description": "The Trexity generated unique identifier for the delivery/order."
              },
              "delivery": {
                "$ref": "#/components/schemas/Delivery"
              }
            }
          }
        }
      },
      "MerchantLocation": {
        "description": "A Merchant Location",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "disabledAt": {
            "type": "string",
            "format": "date-time"
          },
          "disabledReason": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "addressNotes": {
            "type": "string"
          },
          "addressLocation": {
            "$ref": "#/components/schemas/Location"
          },
          "addressProvince": {
            "type": "string"
          },
          "addressCountry": {
            "type": "string"
          },
          "addressCity": {
            "type": "string"
          },
          "addressServiceCity": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string",
            "format": "email"
          },
          "contactName": {
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "type": "string"
          },
          "contactTitle": {
            "type": "string"
          },
          "availableRequirements": {
            "type": "object"
          },
          "billingContactEmail": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "defaultRequiresPersonHandoff": {
            "type": "boolean"
          },
          "defaultContainsAlcohol": {
            "type": "boolean"
          },
          "defaultDeliveryInstructions": {
            "type": "string"
          },
          "defaultPickupInstructions": {
            "type": "string"
          },
          "lifetimeDeliveryCount": {
            "type": "number"
          },
          "lifetimeShipmentsCount": {
            "type": "number"
          },
          "lastDeliveredAt": {
            "type": "string",
            "format": "date-time"
          },
          "operatingHours": {
            "type": "object"
          }
        }
      },
      "ReceiptItem": {
        "description": "A receipt item that is part of a receipt",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "charge",
              "invoice",
              "penalty",
              "refund"
            ],
            "description": "The type of the receipt item"
          },
          "locationName": {
            "type": "string",
            "description": "The name of the location this receipt item is associated with",
            "example": "My Shop"
          },
          "locationTimeZone": {
            "type": "string",
            "description": "The location time zone IANA identifier",
            "example": "America/Toronto"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-12-12T15:21:19.564Z"
          },
          "description": {
            "type": "string",
            "description": "The invoice number or route ID the receipt item is associated with",
            "example": "TRX275915694-K0W"
          },
          "note": {
            "type": "string",
            "description": "The reason for the transaction",
            "example": ""
          },
          "orderIds": {
            "type": "array",
            "description": "The order IDs associated with the receipt item",
            "minItems": 1,
            "items": {
              "type": "string",
              "example": "WPFNKFYH-9469"
            }
          },
          "cost": {
            "type": "integer",
            "description": "The cost of the receipt item in cents",
            "example": 2800
          },
          "additions": {
            "type": "array",
            "description": "Array of surcharges and discounts, where discounts will have a negative amount",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "User friendly description",
                  "example": "Fuel surcharge"
                },
                "amount": {
                  "type": "integer",
                  "description": "The amount of the addition in cents",
                  "example": 57
                }
              }
            }
          },
          "subtotal": {
            "type": "integer",
            "description": "Receipt item subtotal (cost + additions) in cents",
            "example": 2857
          },
          "taxesPaid": {
            "type": "integer",
            "description": "Receipt item taxes in cents",
            "example": 371
          },
          "totalPaid": {
            "type": "integer",
            "description": "Receipt item total (subtotal + taxesPaid) in cents",
            "example": 3228
          }
        }
      },
      "ReceiptResponse": {
        "description": "The receipt items for a receipt",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "receiptItems": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReceiptItem"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "FileResponse": {
        "description": "Returns the binary content of the file in question.\n\nPlease note that our storage endpoints provide [ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) header for caching purposes.\n",
        "content": {
          "application/octet-stream": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      }
    },
    "parameters": {
      "x-trexity-signature": {
        "name": "x-trexity-signature",
        "in": "header",
        "description": "The SHA256 HMAC signature for the request.",
        "schema": {
          "type": "string"
        }
      },
      "x-trexity-event-name": {
        "name": "x-trexity-event-name",
        "in": "header",
        "description": "Webhook event name.",
        "schema": {
          "$ref": "#/components/schemas/WebhookEventName"
        }
      },
      "x-trexity-webhook-order-id": {
        "name": "x-trexity-webhook-order-id",
        "in": "header",
        "description": "The webhook processing sort order. Webhooks may not be delivered in order, but this value can be used to determine processing order.",
        "schema": {
          "type": "integer"
        }
      }
    }
  },
  "security": [
    {
      "MerchantApiKeyAuth": []
    },
    {
      "AccessTokenAuth": []
    }
  ],
  "paths": {
    "/addresses/check": {
      "get": {
        "operationId": "checkAddress",
        "tags": [
          "Addresses"
        ],
        "summary": "Check an address",
        "description": "Checks an address and returns a result that identifies if the address can be\nused as a pickup address/business address, and what delivery classification it\nfalls under.\n\n### Rate Limiting\n\nThis operation can be requested without authentication, however it will have a\nstrict rate limit of 3 requests every 10 seconds.\n\nHowever, authenticated requests can request 12 times every 10 seconds.\n",
        "security": [
          {},
          {
            "MerchantApiKeyAuth": []
          },
          {
            "AccessTokenAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The address to check.",
            "example": "123 Fake St, Ottawa ON K2G 6F2, CA"
          },
          {
            "in": "query",
            "name": "pickupAddress",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The pickup address from which to generate the tiered zones.",
            "example": "123 Fake St, Ottawa ON K2G 6F2, CA"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "pickup": {
                          "type": "boolean",
                          "description": "If `true` then the address can be used as a pickup address (or business address)."
                        },
                        "delivery": {
                          "type": "string",
                          "enum": [
                            "none",
                            "normal",
                            "extended",
                            "tier-1",
                            "tier-2",
                            "tier-3"
                          ],
                          "description": "The delivery classification of the address.\n\n`none` = The address is outside a known delivery zone and is unserviceable.\n\n`normal` = The address is serviceable and normal delivery rates apply.\n\n`extended` = The address is serviceable and surcharges may apply.\n\n`tier-1` = (only if pickupAddress is specified) The address belongs to 'tier-1' delivery tier.\n\n`tier-2` = (only if pickupAddress is specified) The address belongs to 'tier-2' delivery tier.\n\n`tier-3` = (only if pickupAddress is specified) The address belongs to 'tier-3' delivery tier.\n"
                        },
                        "lngLat": {
                          "type": "object",
                          "description": "The latitude and logitude of the checked address.\n",
                          "properties": {
                            "longitude": {
                              "type": "number",
                              "description": "Longitude of the address"
                            },
                            "latitude": {
                              "type": "number",
                              "description": "Latitude of the address"
                            }
                          }
                        },
                        "serviceCity": {
                          "type": "string",
                          "description": "Service city that the address is located. Provided in the format: \"(city name), (2 letter abbreviation of province)\" (may or may not be supported by Trexity)\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Address could not be recognized as a valid address. Review address and ensure all address components are present and follow formatting guide."
          },
          "429": {
            "description": "The request has been rate limited. Try making the request again after the rate limit window."
          },
          "500": {
            "description": "Server error. Try making the request again."
          }
        }
      }
    },
    "/rates/simple": {
      "post": {
        "operationId": "getSimpleRate",
        "tags": [
          "Shipping Rates"
        ],
        "summary": "Simple rate",
        "description": "Calculate the rate for a direct delivery from a single pickup address to a\nsingle delivery address.\n\nReturns the estimated distance (in meters), estimated travel duration (in\nseconds), and fee from the pickup address to the delivery address.\n\nIf no `pickupAddress` is specified then the merchant's business address will\nbe used as the pickup address.\n\nReview the [Usage Policy](/#section/Usage-Policy).\n\nUse this endpoint for direct delivery rates (single pickup\naddress and single delivery address), and use the new [Complex Rate](/#operation/createComplexRateRequest)\nendpoint for multiple delivery addresses.\n\nThe rate response will now include estimates for post, pickup, and delivery time.\nAdditionally, the new properties `pickupAfter`, `deliverAfter` and `deliverBefore` can be provided to indicate a\ndelivery window. Otheriwse the next available delivery window (i.e. ASAP) is assumed. Use the estimated values\nin the response when creating the delivery.\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X POST {server-url}/rates/simple\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\\\n  -d '{\n    \"pickupAddress\": \"456 Elgin St, Ottawa ON K2P 1N5, CA\",\n    \"deliveryAddress\": \"225 Preston St, Ottawa ON K1R 7R1, CA\",\n    \"requirements\": {\n      \"legalAgeAlcohol\": true\n    },\n    \"orderValue\": 2500\n  }'\n"
          }
        ],
        "requestBody": {
          "description": "Payload that minimally describes a direct delivery.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleRatePayload"
              },
              "example": {
                "pickupAddress": "456 Elgin Street, Ottawa ON K2P 1N5, CA",
                "deliveryAddress": "225 Preston St, Ottawa ON K1R 7R1, CA",
                "requirements": {
                  "legalAgeAlcohol": true
                },
                "orderValue": 2500
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleRateResponse"
                },
                "examples": {
                  "Can Deliver": {
                    "value": {
                      "data": [
                        {
                          "totalWithoutTaxes": 1688,
                          "name": "Local Delivery",
                          "description": "by Trexity",
                          "taxRates": {
                            "HST": 0.13
                          },
                          "pickupDeliveryDuration": 2121,
                          "pickupDeliveryDistance": 17172,
                          "directionsResult": {
                            "features": [
                              {
                                "geometry": {
                                  "type": "LineString",
                                  "coordinates": [
                                    [
                                      -75.72048,
                                      45.32606
                                    ],
                                    [
                                      -75.72022,
                                      45.32575
                                    ],
                                    [
                                      -75.72007,
                                      45.32555
                                    ],
                                    [
                                      -75.72038,
                                      45.32544
                                    ],
                                    [
                                      -75.72209,
                                      45.32479
                                    ],
                                    [
                                      -75.72319,
                                      45.32436
                                    ],
                                    [
                                      -75.72502,
                                      45.32366
                                    ],
                                    [
                                      -75.72764,
                                      45.32266
                                    ],
                                    [
                                      -75.7343,
                                      45.32012
                                    ],
                                    [
                                      -75.73699,
                                      45.31907
                                    ],
                                    [
                                      -75.73815,
                                      45.31863
                                    ],
                                    [
                                      -75.73974,
                                      45.31802
                                    ],
                                    [
                                      -75.73994,
                                      45.31801
                                    ],
                                    [
                                      -75.74025,
                                      45.31792
                                    ],
                                    [
                                      -75.7417,
                                      45.31735
                                    ],
                                    [
                                      -75.74183,
                                      45.3173
                                    ],
                                    [
                                      -75.7422,
                                      45.31788
                                    ],
                                    [
                                      -75.74249,
                                      45.31834
                                    ],
                                    [
                                      -75.74303,
                                      45.31918
                                    ],
                                    [
                                      -75.74357,
                                      45.32011
                                    ],
                                    [
                                      -75.74428,
                                      45.32132
                                    ],
                                    [
                                      -75.7446,
                                      45.32186
                                    ],
                                    [
                                      -75.74507,
                                      45.32262
                                    ],
                                    [
                                      -75.74675,
                                      45.32537
                                    ],
                                    [
                                      -75.7486,
                                      45.32835
                                    ],
                                    [
                                      -75.74912,
                                      45.32923
                                    ],
                                    [
                                      -75.74962,
                                      45.33001
                                    ],
                                    [
                                      -75.75044,
                                      45.33134
                                    ],
                                    [
                                      -75.75067,
                                      45.33167
                                    ],
                                    [
                                      -75.7511,
                                      45.33242
                                    ],
                                    [
                                      -75.75171,
                                      45.33339
                                    ],
                                    [
                                      -75.75201,
                                      45.33394
                                    ],
                                    [
                                      -75.75287,
                                      45.3355
                                    ],
                                    [
                                      -75.75375,
                                      45.33713
                                    ],
                                    [
                                      -75.75483,
                                      45.33911
                                    ],
                                    [
                                      -75.75518,
                                      45.33977
                                    ],
                                    [
                                      -75.75584,
                                      45.34089
                                    ],
                                    [
                                      -75.75655,
                                      45.34206
                                    ],
                                    [
                                      -75.7569,
                                      45.34268
                                    ],
                                    [
                                      -75.75786,
                                      45.34434
                                    ],
                                    [
                                      -75.75866,
                                      45.34572
                                    ],
                                    [
                                      -75.75942,
                                      45.34698
                                    ],
                                    [
                                      -75.76006,
                                      45.34809
                                    ],
                                    [
                                      -75.76026,
                                      45.34836
                                    ],
                                    [
                                      -75.76049,
                                      45.34861
                                    ],
                                    [
                                      -75.76117,
                                      45.34926
                                    ],
                                    [
                                      -75.76187,
                                      45.34995
                                    ],
                                    [
                                      -75.7621,
                                      45.35022
                                    ],
                                    [
                                      -75.76231,
                                      45.3505
                                    ],
                                    [
                                      -75.76283,
                                      45.35145
                                    ],
                                    [
                                      -75.76295,
                                      45.35166
                                    ],
                                    [
                                      -75.76363,
                                      45.35288
                                    ],
                                    [
                                      -75.76475,
                                      45.35486
                                    ],
                                    [
                                      -75.76566,
                                      45.3565
                                    ],
                                    [
                                      -75.76625,
                                      45.35759
                                    ],
                                    [
                                      -75.76727,
                                      45.35935
                                    ],
                                    [
                                      -75.76763,
                                      45.36002
                                    ],
                                    [
                                      -75.76761,
                                      45.36012
                                    ],
                                    [
                                      -75.76766,
                                      45.36027
                                    ],
                                    [
                                      -75.76769,
                                      45.36053
                                    ],
                                    [
                                      -75.76768,
                                      45.36066
                                    ],
                                    [
                                      -75.76764,
                                      45.3608
                                    ],
                                    [
                                      -75.76757,
                                      45.36094
                                    ],
                                    [
                                      -75.76747,
                                      45.36107
                                    ],
                                    [
                                      -75.76727,
                                      45.36126
                                    ],
                                    [
                                      -75.766,
                                      45.36212
                                    ],
                                    [
                                      -75.76479,
                                      45.36289
                                    ],
                                    [
                                      -75.76477,
                                      45.36291
                                    ],
                                    [
                                      -75.76474,
                                      45.36299
                                    ],
                                    [
                                      -75.76451,
                                      45.36312
                                    ],
                                    [
                                      -75.76389,
                                      45.36345
                                    ],
                                    [
                                      -75.76335,
                                      45.36374
                                    ],
                                    [
                                      -75.76238,
                                      45.36425
                                    ],
                                    [
                                      -75.76147,
                                      45.36474
                                    ],
                                    [
                                      -75.75969,
                                      45.3657
                                    ],
                                    [
                                      -75.75897,
                                      45.36618
                                    ],
                                    [
                                      -75.75838,
                                      45.36665
                                    ],
                                    [
                                      -75.75665,
                                      45.36833
                                    ],
                                    [
                                      -75.75444,
                                      45.37044
                                    ],
                                    [
                                      -75.74848,
                                      45.37595
                                    ],
                                    [
                                      -75.74274,
                                      45.3812
                                    ],
                                    [
                                      -75.73835,
                                      45.38522
                                    ],
                                    [
                                      -75.73816,
                                      45.3854
                                    ],
                                    [
                                      -75.73737,
                                      45.38611
                                    ],
                                    [
                                      -75.73613,
                                      45.38726
                                    ],
                                    [
                                      -75.73556,
                                      45.38785
                                    ],
                                    [
                                      -75.73516,
                                      45.38828
                                    ],
                                    [
                                      -75.73463,
                                      45.38892
                                    ],
                                    [
                                      -75.73369,
                                      45.39013
                                    ],
                                    [
                                      -75.73317,
                                      45.39084
                                    ],
                                    [
                                      -75.73228,
                                      45.39198
                                    ],
                                    [
                                      -75.7309,
                                      45.39371
                                    ],
                                    [
                                      -75.72964,
                                      45.39524
                                    ],
                                    [
                                      -75.72912,
                                      45.39574
                                    ],
                                    [
                                      -75.72856,
                                      45.39622
                                    ],
                                    [
                                      -75.7281,
                                      45.39654
                                    ],
                                    [
                                      -75.72744,
                                      45.39691
                                    ],
                                    [
                                      -75.72456,
                                      45.39828
                                    ],
                                    [
                                      -75.72286,
                                      45.39906
                                    ],
                                    [
                                      -75.72178,
                                      45.39954
                                    ],
                                    [
                                      -75.72093,
                                      45.39989
                                    ],
                                    [
                                      -75.71979,
                                      45.40034
                                    ],
                                    [
                                      -75.71849,
                                      45.4008
                                    ],
                                    [
                                      -75.71714,
                                      45.40125
                                    ],
                                    [
                                      -75.71549,
                                      45.40175
                                    ],
                                    [
                                      -75.71453,
                                      45.40201
                                    ],
                                    [
                                      -75.71334,
                                      45.40231
                                    ],
                                    [
                                      -75.7124,
                                      45.40253
                                    ],
                                    [
                                      -75.71094,
                                      45.40285
                                    ],
                                    [
                                      -75.70871,
                                      45.40328
                                    ],
                                    [
                                      -75.70661,
                                      45.4037
                                    ],
                                    [
                                      -75.70437,
                                      45.40419
                                    ],
                                    [
                                      -75.70303,
                                      45.40453
                                    ],
                                    [
                                      -75.70176,
                                      45.40488
                                    ],
                                    [
                                      -75.70002,
                                      45.4054
                                    ],
                                    [
                                      -75.69832,
                                      45.40596
                                    ],
                                    [
                                      -75.69703,
                                      45.40644
                                    ],
                                    [
                                      -75.69667,
                                      45.4065
                                    ],
                                    [
                                      -75.69615,
                                      45.40668
                                    ],
                                    [
                                      -75.69523,
                                      45.40701
                                    ],
                                    [
                                      -75.69409,
                                      45.40741
                                    ],
                                    [
                                      -75.69383,
                                      45.40752
                                    ],
                                    [
                                      -75.69363,
                                      45.40763
                                    ],
                                    [
                                      -75.69346,
                                      45.40781
                                    ],
                                    [
                                      -75.69341,
                                      45.40792
                                    ],
                                    [
                                      -75.69339,
                                      45.40803
                                    ],
                                    [
                                      -75.69339,
                                      45.40817
                                    ],
                                    [
                                      -75.69344,
                                      45.40831
                                    ],
                                    [
                                      -75.69363,
                                      45.40857
                                    ],
                                    [
                                      -75.69383,
                                      45.40879
                                    ],
                                    [
                                      -75.69389,
                                      45.40895
                                    ],
                                    [
                                      -75.6941,
                                      45.40922
                                    ],
                                    [
                                      -75.69476,
                                      45.41006
                                    ],
                                    [
                                      -75.69579,
                                      45.41129
                                    ],
                                    [
                                      -75.69797,
                                      45.41383
                                    ],
                                    [
                                      -75.69912,
                                      45.41515
                                    ],
                                    [
                                      -75.70019,
                                      45.41642
                                    ],
                                    [
                                      -75.70101,
                                      45.41743
                                    ],
                                    [
                                      -75.7019,
                                      45.41845
                                    ],
                                    [
                                      -75.70106,
                                      45.4188
                                    ],
                                    [
                                      -75.69873,
                                      45.4198
                                    ],
                                    [
                                      -75.69724,
                                      45.42044
                                    ],
                                    [
                                      -75.69662,
                                      45.4207
                                    ]
                                  ]
                                },
                                "type": "Feature",
                                "properties": {
                                  "bounds": {
                                    "northeast": {
                                      "lat": 45.4207038,
                                      "lng": -75.6933862
                                    },
                                    "southwest": {
                                      "lat": 45.3172975,
                                      "lng": -75.7676887
                                    }
                                  }
                                }
                              }
                            ],
                            "type": "FeatureCollection"
                          },
                          "total": 1908
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Input error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "nullable": true
                    },
                    "params": {
                      "type": "object",
                      "nullable": true
                    },
                    "code": {
                      "type": "string",
                      "nullable": true,
                      "description": "Unexhaustive list of codes.\n\n- `invalid-merchant-requirements` = When the requirements specified don't match the requirements granted to the merchant\n- `pickup-address-unserviceable` = When the pickup address cannot be matched to any of the merchant's locations\n- `invalid-pickup-address` = When the pickup address is invalid\n- `pickup-point-outside-zone` = When the pickup address is outside Trexity's service area\n- `invalid-data-payload` = When there are issues with the input data provided\n- `num-labels-too-large` = When numLabels is too large\n- `time-constraint-violation` = When the delivery/pickup time constraints specified cannot be met\n"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "No rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "minItems": 0,
                      "maxItems": 0,
                      "items": {
                        "$ref": "#/components/schemas/SimpleRate"
                      }
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string",
                          "description": "Unexhaustive list of codes.\n\n- `service-unavailable` = When API Service Availability Rules in merchant portal prevent rates from being returned\n- `time-constraint-violation` = When the constraint specified by pickupAfter, or deliverAfter and/or deliverBefore cannot be met\n- `post-date-outside-operating-hours` = When the estimated post date is outside Trexity's or the merchant's operating hours\n- `delivery-date-outside-operating-hours` = When the estimated delivery date is outside Trexity's or the merchant's operating hours\n- `pickup-address-outsidetaxboundary` = When the pickup address is outside the province/state of the merchant's location\n- `merchant-disabled` = When the merchant account has been disabled\n- `missing-profile-details` = When the merchant profile is incomplete\n- `delivery-point-outside-zone` = When the delivery address is outside Trexity's service area\n- `pickup-point-outside-zone` = When the pickup address is outside Trexity's service area\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rates/complex": {
      "post": {
        "operationId": "createComplexRateRequest",
        "tags": [
          "Shipping Rates"
        ],
        "summary": "Create complex rate request",
        "description": "scheduledPostAt is considered deprecated. It is still supported, but at some point in the future, it will not be.\nIf you want to schedule a shipment, please use exactly one of:\n  1) pickupStartAt and an optional pickupEndAt (when to pickup by)\n  2) deliverStartAt and an optional deliverEndAt (when to deliver by)\n\nIf providing a value for `scheduledPostAt` then an approximate value for `pickupStartAt` will attempt to be calculated. If an appproximation\ncannot be determined, then no complex rate will be returned and an error will be returned.\n\n---\n\nQueue a list of shipments for an optimally routed rate.\n\nThe typical use case of this API is to provide multiple shipments (pickup &\ndelivery) to this endpoint, which responds with a request ID to be polled\nasynchronously using the [Complex Rate status](/#operation/getComplexRateStatus)\nendpoint, and ultimately retrieving the rate using the [Complex Rate result](/#operation/getComplexRateResult)\nendpoint.\n\nOptionally, you can then take the rate ID provided in the rate result and\nhave the shipments created in bulk using the [Bulk Shipment Creation](/#operation/createCreateBulkShipmentsRequest)\nendpoint.\n\n**Order ID**\n\nFor each parcel across all shipments provided to this endpoint, the\n`orderId` must be unique. This allows us to refer back to the parcel by\n`orderId` in the result `errors` array.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "shipments"
                ],
                "properties": {
                  "locationId": {
                    "type": "string",
                    "description": "Optionally attach a Location to this request. Will be set to default if not specified. Please see [Locations](#tag/getLocations)."
                  },
                  "shipments": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 400,
                    "items": {
                      "$ref": "#/components/schemas/DirectDeliveryPayload"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully queued an asynchronous complex rate request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ComplexRateStatusResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unknown server problem"
          }
        }
      }
    },
    "/rates/complex/{requestId}": {
      "get": {
        "operationId": "getComplexRateStatus",
        "tags": [
          "Shipping Rates"
        ],
        "summary": "Get complex rate request status",
        "description": "Get the status of an asynchronous complex rate request",
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The asynchronous complex rate request ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The status of an asynchronous complex rate request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ComplexRateStatusResponse"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unknown server problem"
          }
        }
      }
    },
    "/rates/complex/{requestId}/result": {
      "get": {
        "operationId": "getComplexRateResult",
        "tags": [
          "Shipping Rates"
        ],
        "summary": "Get complex rate result",
        "description": "Get the result of a completed asynchronous complex rate request",
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The asynchronous complex rate request ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The result of a completed asynchronous complex rate request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ComplexRateResultResponse"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Asynchronous complex rate request is not complete yet"
          }
        }
      }
    },
    "/regions/service-city-zones": {
      "get": {
        "operationId": "serviceCityZones",
        "tags": [
          "Regions"
        ],
        "summary": "Retrieve service city zones",
        "description": "Returns all the service city zones that includes (for each city) their geoJSON geometry (polygons/multipolygons)\n\n### Rate Limiting\n\nThis operation can be requested without authentication, however it will have a\nstrict rate limit of 6 requests every 10 seconds.\n\nHowever, authenticated requests can request 12 times every 10 seconds.\n",
        "security": [
          {},
          {
            "MerchantApiKeyAuth": []
          },
          {
            "AccessTokenAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pickupAddress",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The pickup address from which to generate the tiered zones.",
            "example": "123 Fake St, Ottawa ON K2G 6F2, CA"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pickup": {
                      "type": "array",
                      "description": "Geographic areas that merchants can create deliveries for pickup from",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of service city zone"
                          },
                          "geometry": {
                            "type": "object",
                            "description": "Geometry geoJSON",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "Polygon",
                                  "Multipolygon"
                                ]
                              },
                              "coordinates": {
                                "type": "array",
                                "description": "Array of arrays containing longitude and latitude coordinates (in that order)",
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Object that can contain miscellaneous props, but will always contain \"layer\""
                          },
                          "serviceCity": {
                            "type": "string",
                            "description": "Service city name"
                          },
                          "type": {
                            "type": "string",
                            "description": "Reference to the zone type (\"pickup\")"
                          }
                        }
                      }
                    },
                    "delivery": {
                      "type": "array",
                      "description": "Geographic areas that merchants can deliver to according to the standard delivery fees\n",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of service city zone"
                          },
                          "geometry": {
                            "type": "object",
                            "description": "Geometry geoJSON",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "Polygon",
                                  "Multipolygon"
                                ]
                              },
                              "coordinates": {
                                "type": "array",
                                "description": "Array of arrays containing longitude and latitude coordinates (in that order)",
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Object that can contain miscellaneous props, but will always contain \"layer\""
                          },
                          "serviceCity": {
                            "type": "string",
                            "description": "Service city name"
                          },
                          "type": {
                            "type": "string",
                            "description": "Reference to the zone type (\"delivery\")"
                          }
                        }
                      }
                    },
                    "surcharge": {
                      "type": "array",
                      "description": "Geographic areas that are considered outside the standard delivery zone and could include a\nsurcharge fee in addition to the standard delivery fee\n",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of service city zone"
                          },
                          "geometry": {
                            "type": "object",
                            "description": "Geometry geoJSON",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "Polygon",
                                  "Multipolygon"
                                ]
                              },
                              "coordinates": {
                                "type": "array",
                                "description": "Array of arrays containing longitude and latitude coordinates (in that order)",
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Object that can contain miscellaneous props, but will always contain \"layer\""
                          },
                          "serviceCity": {
                            "type": "string",
                            "description": "Service city name"
                          },
                          "type": {
                            "type": "string",
                            "description": "Reference to the zone type (\"surcharge\")"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The request has been rate limited. Try making the request again after the rate limit window."
          },
          "500": {
            "description": "Server error. Try making the request again."
          }
        }
      }
    },
    "/storage/delivery/images/delivery": {
      "get": {
        "operationId": "getShipmentDeliveryImage",
        "tags": [
          "Storage"
        ],
        "summary": "Drop-off photo",
        "description": "Gets the actual JPG image data of the driver's delivery image for this parcel.\n\nThis is used as a confirmation that the driver has delivered the parcel.\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \"{server-url}/delivery/images?id={deliveryId}\"\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "servers": [
          {
            "description": "production",
            "url": "https://trexity.app/storage"
          },
          {
            "description": "sandbox",
            "url": "https://trexity-driver-mobile.uc.r.appspot.com/storage"
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the Delivery that this delivery belongs to"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FileResponse"
          },
          "304": {
            "description": "File contents haven't changed"
          },
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/delivery/{deliveryId}": {
      "get": {
        "operationId": "getDelivery",
        "tags": [
          "Deliveries"
        ],
        "summary": "Get Delivery",
        "description": "Retrieve a delivery\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET {server-url}/delivery/1234-4321-1234-4321\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery (can be externalId or delivery ID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Delivery not found"
          }
        }
      }
    },
    "/delivery/{deliveryId}/delivery-status": {
      "get": {
        "operationId": "getDeliveryStatus",
        "tags": [
          "Deliveries"
        ],
        "summary": "Get Delivery Status",
        "description": "Retrieve a delivery's status\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET {server-url}/delivery/{deliveryId}/delivery-status\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery (can be externalId or delivery ID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "description": "The current delivery status of the parcel.\n\n- `pending`: The parcel is awaiting pickup or delivery.\n- `in-transit`: The parcel is in transit, either out for pickup or out for delivery.\n- `delivered`: The parcel has been delivered.\n- `undeliverable`: The delivery was attempted but failed and the parcel was returned to the sender.\n- `cancelled`: The parcel was cancelled.\n",
                          "type": "string",
                          "enum": [
                            "pending",
                            "in-transit",
                            "delivered",
                            "undeliverable",
                            "cancelled"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Delivery not found"
          }
        }
      }
    },
    "/delivery/{deliveryId}/pod": {
      "get": {
        "operationId": "getDeliveryPod",
        "tags": [
          "Deliveries"
        ],
        "summary": "Get Delivery Proof of Delivery",
        "description": "Get a delivery's proof of delivery\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET {server-url}/delivery/1234-4321-1234-4321/pod\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery (can be externalId or delivery ID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Photographic Proof of Delivery."
                }
              }
            }
          },
          "400": {
            "description": "Delivery does not have photographic Proof-Of-Delivery support.\nThis means that the Delivery is a part of a shipment that uses customer\nPIN as a delivery verification mechanism.\n"
          },
          "404": {
            "description": "Delivery not found or delivery not delivered yet"
          }
        }
      }
    },
    "/delivery/{deliveryId}/label": {
      "get": {
        "operationId": "getDeliveryLabel",
        "tags": [
          "Deliveries"
        ],
        "summary": "Get Delivery Label",
        "description": "Get a delivery's shipping label\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl -X GET {server-url}/delivery/1234-4321-1234-4321/label\\\n  -H 'Content-Type: application/json'\\\n  -H 'Authorization: Bearer <Trexity API Key>'\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deliveryId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the delivery (can be externalId or delivery ID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "A label that needs to be scanned at pickup by a Trexity driver."
                }
              },
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "A label that needs to be scanned at pickup by a Trexity driver."
                }
              },
              "application/jsonl": {
                "schema": {
                  "type": "string",
                  "format": "jsonl",
                  "description": "JSONL text where each line represents a label encoded as a JSON object. Up to \"numLabels\" (from the parcel) labels are returned.\n\nEach label is an encoded JSON object with the following fields:\n\n- `label`: The label as a base64 encoded string with PNG format.\n- `mimeType`: The MIME type of the label. Default is `image/png`.\n\n**NOTE:** The example shows the response as a JSON encoded string, but in practice\nthe response is actually JSON encoded objects separated by newline characters. This is\na limitation of our OpenAPI renderer.\n\nSee: https://jsonlines.org/\n"
                },
                "example": "{\"label\": \"...base64encodedstring...\", \"mimeType\": \"image/png\"}\n{\"label\": \"...base64encodedstring...\", \"mimeType\": \"image/png\"}\n"
              }
            }
          },
          "400": {
            "description": "Delivery does not have a label.\nThis means that the Merchant is responsible for creating the labels.\n"
          },
          "404": {
            "description": "Delivery not found"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "operationId": "getWebhooks",
        "tags": [
          "Webhooks"
        ],
        "summary": "List webhooks",
        "description": "Gets all registered webhooks or registered webhooks for an event.\n",
        "parameters": [
          {
            "in": "query",
            "name": "eventName",
            "schema": {
              "$ref": "#/components/schemas/WebhookEventName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List registered webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Webhook"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameters or payload is invalid. Correct the parameters and try again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal error has occurred and the request cannot be completed.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createWebhook",
        "tags": [
          "Webhooks"
        ],
        "summary": "Create webhook",
        "description": "Create a new webhook for the specified event.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "eventName",
                  "url"
                ],
                "properties": {
                  "eventName": {
                    "$ref": "#/components/schemas/WebhookEventName"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Secure (https://...) URL to send the webhook request to.",
                    "example": "https://example.com/trexity/webhook-handler"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully register a webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "required": [
                        "webhookId"
                      ],
                      "properties": {
                        "webhookId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Parameters or payload is invalid. Correct the parameters and try again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal error has occurred and the request cannot be completed.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "callbacks": {
          "shipment.created": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.created",
                "description": "Occurs when a shipment has been created.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.updated": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.updated",
                "description": "Occurs when a shipment has had address or parcel information updated.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.deleted": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.deleted",
                "description": "Occurs when a shipment has been deleted.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.posted": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.posted",
                "description": "Occurs when a shipment has been posted to our driver community. This can occur as a result of an explicit \"post\" action\nfrom a user or from the platform posting a shipment based on the shipment's `scheduledPostAt` setting.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.driver.accepted": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.driver.accepted",
                "description": "Occurs when a shipment has been accepted for delivery by a driver from our driver community.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.driver.arrived_at_pickup": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.driver.arrived_at_pickup",
                "description": "Occurs when a driver has arrived at the pickup address for a parcel within a shipment.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.driver.picked_up": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.driver.picked_up",
                "description": "Occurs when a driver has picked up (e.g. has posession) a parcel within a shipment.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.driver.arrived_at_delivery": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.driver.arrived_at_delivery",
                "description": "Occurs when a driver arrived at a parcel's delivery address.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ParcelWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.driver.parcel_delivered": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.driver.parcel_delivered",
                "description": "Occurs when a driver has delivered a parcel within a shipment.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ParcelWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.completed": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.completed",
                "description": "Occurs when a shipment has all deliverable parcels delivered and has been successfully paid.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.cancelled": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.cancelled",
                "description": "Occurs when a shipment has been cancelled.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.driver.renounced": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.driver.renounced",
                "description": "Occurs when a shipment has been renounced by a driver after they accepted.",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "shipment.on_hold": {
            "{$request.body#/url}": {
              "post": {
                "summary": "shipment.on_hold",
                "description": "Occurs when a shipment has been put on hold.\n\nA shipment on hold will be immediately removed from our driver network and not be automatically posted to our driver community.\n\nAdditionally, shipments on hold must be re-posted.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/DeliveryWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "parcel.created": {
            "{$request.body#/url}": {
              "post": {
                "summary": "parcel.created",
                "description": "Occurs when a parcel has been created during a shipment create or added to a shipment during update.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ParcelWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "parcel.updated": {
            "{$request.body#/url}": {
              "post": {
                "summary": "parcel.updated",
                "description": "Occurs when a parcel has been updated during a shipment update.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ParcelWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "parcel.deleted": {
            "{$request.body#/url}": {
              "post": {
                "summary": "parcel.deleted",
                "description": "Occurs when a parcel has been deleted during a shipment update.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ParcelWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "parcel.picked_up": {
            "{$request.body#/url}": {
              "post": {
                "summary": "parcel.picked_up",
                "description": "Occurs when a parcel has been scanned and picked up by a driver.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ParcelWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "parcel.delivered": {
            "{$request.body#/url}": {
              "post": {
                "summary": "parcel.delivered",
                "description": "Occurs when a parcel has been scanned and delivered to the recipient.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ParcelWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "parcel.returning": {
            "{$request.body#/url}": {
              "post": {
                "summary": "parcel.returning",
                "description": "Occurs when a parcel is being returned due to the driver not being able to complete the delivery.\nThis can be due to customer not being home, customer not having the delivery PIN, or customer refusing delivery.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ParcelWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          },
          "parcel.returned": {
            "{$request.body#/url}": {
              "post": {
                "summary": "parcel.returned",
                "description": "Occurs when a parcel has been returned to merchant.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/x-trexity-signature"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-event-name"
                  },
                  {
                    "$ref": "#/components/parameters/x-trexity-webhook-order-id"
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ParcelWebhookPayload"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Request successfully processed"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookId}": {
      "delete": {
        "operationId": "deleteWebhook",
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "Delete a registered webhook.\n",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "webhookId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted a webhook or if the webhook ID does not exist."
          },
          "400": {
            "description": "Parameters or payload is invalid. Correct the parameters and try again.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Webhook is not found."
          },
          "500": {
            "description": "An internal error has occurred and the request cannot be completed.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "operationId": "getLocations",
        "tags": [
          "Locations"
        ],
        "summary": "List locations for a Merchant",
        "description": "Gets all Locations. In order to manage Locations, you need to use the [Merchant Portal](https://merchant.trexity.com/).\n",
        "responses": {
          "200": {
            "description": "List Locations for a Merchant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MerchantLocation"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal error has occurred and the request cannot be completed.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations/by-query": {
      "get": {
        "operationId": "getLocationByQuery",
        "tags": [
          "Locations"
        ],
        "summary": "Get a best match location based on name and address",
        "description": "Returns a best match location based on name or address.\n\n**One of name or address or both must be provided.**\n",
        "parameters": [
          {
            "in": "query",
            "name": "address",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The address that we will use to find a location.",
            "example": "123 Fake St, Ottawa ON K2G 6F2, CA"
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The name of the location.",
            "example": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MerchantLocation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Input error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "nullable": true
                    },
                    "params": {
                      "type": "object",
                      "nullable": true
                    },
                    "code": {
                      "type": "string",
                      "nullable": true,
                      "description": "Unexhaustive list of codes.\n\n- `invalid-data-payload` = When there are issues with the input data provided\n"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "NotFound"
          },
          "500": {
            "description": "An internal error has occurred and the request cannot be completed.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/receipts/{yearMonth}": {
      "get": {
        "operationId": "getReceipt",
        "tags": [
          "Receipts"
        ],
        "summary": "Get Receipt",
        "description": "Retrieve the receipt items for all or one location from a receipt for a particular calendar month\n",
        "parameters": [
          {
            "in": "path",
            "name": "yearMonth",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The year and month like \"YYYY-MM\"",
            "example": "2022-01"
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string"
            },
            "description": "The merchant location ID or case insensitive name. If specified then all receipt items will only be for this lcoation.",
            "example": "My Shop"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "description": "The receipt items rendered as CSV"
                }
              },
              "text/html": {
                "schema": {
                  "description": "The receipt items rendered as a standalone HTML"
                }
              },
              "application/pdf": {
                "schema": {
                  "description": "The receipt items rendered as a PDF"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Merchant location not found"
          }
        }
      }
    }
  }
}